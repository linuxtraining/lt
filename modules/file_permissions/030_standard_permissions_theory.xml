<?hard-pagebreak?>
<section><title>file ownership</title>
	<section><title>user owner and group owner</title>
		<para>The <command>users</command> and <command>groups</command> of a system can be locally managed in <command>/etc/passwd</command><indexterm><primary>/etc/passwd</primary></indexterm> and <command>/etc/group</command><indexterm><primary>/etc/group</primary></indexterm>, or they can be in a NIS, LDAP, or Samba domain. These users and groups can <command>own</command> files. Actually, every file has a <command>user owner</command><indexterm><primary>file ownership</primary></indexterm> and a <command>group owner</command>, as can be seen in the following screenshot.</para>
		<screen>paul@rhel65:~/owners$ ls -lh
total 636K
-rw-r--r--. 1 paul snooker 1.1K Apr  8 18:47 data.odt
-rw-r--r--. 1 paul paul    626K Apr  8 18:46 file1
-rw-r--r--. 1 root tennis   185 Apr  8 18:46 file2
-rw-rw-r--. 1 root root       0 Apr  8 18:47 stuff.txt
paul@rhel65:~/owners$</screen>
		<para>User paul owns three files; file1 has paul as <command>user owner</command> and has the group paul as <command>group owner</command>, data.odt is <command>group owned</command> by the group snooker, file2 by the group tennis.</para>
		<para>The last file is called stuff.txt and is owned by the root user and the root group.</para>
	</section>
	<section><title>listing user accounts</title>
		<para>You can use the following command to list all local user accounts.</para>
		<screen>paul@debian10~$ cut -d: -f1 /etc/passwd | column 
root            ntp             sam             bert            naomi
daemon          mysql           tom             rino            matthias2
bin             paul            wouter          antonio         bram
sys             maarten         robrecht        simon           fabrice
sync            kevin           bilal           sven            chimene
games           yuri            dimitri         wouter2         messagebus
man             william         ahmed           tarik           roger
lp              yves            dylan           jan             frank
mail            kris            robin           ian             toon
news            hamid           matthias        ivan            rinus
uucp            vladimir        ben             azeddine        eddy
proxy           abiy            mike            eric            bram2
www-data        david           kevin2          kamel           keith
backup          chahid          kenzo           ischa           jesse
list            stef            aaron           bart            frederick
irc             joeri           lorenzo         omer            hans
gnats           glenn           jens            kurt            dries
nobody          yannick         ruben           steve           steve2
libuuid         christof        jelle           constantin      tomas
Debian-exim     george          stefaan         sam2            johan
statd           joost           marc            bjorn           tom2
sshd            arno            thomas          ronald</screen>
</section>
<?hard-pagebreak?>
	<section><title>chgrp</title>
		<para>You can change the group owner of a file using the <command>chgrp</command><indexterm><primary>chgrp(1)</primary></indexterm> command.</para>
		<screen>root@rhel65:/home/paul/owners# ls -l file2
-rw-r--r--. 1 root tennis 185 Apr  8 18:46 file2
root@rhel65:/home/paul/owners# <command>chgrp snooker file2</command>
root@rhel65:/home/paul/owners# ls -l file2
-rw-r--r--. 1 root <command>snooker</command> 185 Apr  8 18:46 file2
root@rhel65:/home/paul/owners#</screen>
	</section>
	<section><title>chown</title>
		<para>The user owner of a file can be changed with <command>chown</command><indexterm><primary>chown(1)</primary></indexterm> command.</para>
		<screen>root@laika:/home/paul# ls -l FileForPaul 
-rw-r--r-- 1 root paul 0 2008-08-06 14:11 FileForPaul
root@laika:/home/paul# chown paul FileForPaul 
root@laika:/home/paul# ls -l FileForPaul 
-rw-r--r-- 1 paul paul 0 2008-08-06 14:11 FileForPaul</screen>
		<para>You can also use <command>chown</command> to change both the user owner and the group owner.</para>
		<screen>root@laika:/home/paul# ls -l FileForPaul 
-rw-r--r-- 1 paul paul 0 2008-08-06 14:11 FileForPaul
root@laika:/home/paul# chown root:project42 FileForPaul 
root@laika:/home/paul# ls -l FileForPaul 
-rw-r--r-- 1 root project42 0 2008-08-06 14:11 FileForPaul</screen>
	</section>
</section>
<?hard-pagebreak?>
<section><title>list of special files</title>
	<para>When you use <command>ls -l</command><indexterm><primary>ls -l</primary></indexterm>, for each file you can see ten characters before the user and group owner. The first character tells us the type of file. Regular files get a <command>-</command>, directories get a <command>d</command>, symbolic links are shown with an <command>l</command>, pipes get a <command>p</command>, character devices a <command>c</command>, block devices a <command>b</command>, and sockets an <command>s</command>.</para>
<table frame='all'><title>Unix special files</title>
<?dbfo table-width="50%" ?>
<tgroup cols='2' align='left' colsep='1' rowsep='1'>
<colspec colname='c1' colwidth="2*" align="center"/>
<colspec colname='c2' colwidth="4*" align="center"/>
<thead>
<row>
  <entry>first character</entry>
  <entry>file type</entry>
</row>
</thead>
<tbody>
<row>
  <entry>-</entry>
  <entry>normal file</entry>
</row>
<row>
  <entry>d</entry>
  <entry>directory</entry>
</row>
<row>
  <entry>l</entry>
  <entry>symbolic link</entry>
</row>
<row>
  <entry>p</entry>
  <entry>named pipe</entry>
</row>
<row>
  <entry>b</entry>
  <entry>block device</entry>
</row>
<row>
  <entry>c</entry>
  <entry>character device</entry>
</row>
<row>
  <entry>s</entry>
  <entry>socket</entry>
</row>
</tbody>
</tgroup>
</table>
	<para>Below a screenshot of a character device (the console) and a block device (the hard disk).</para>
	<screen>paul@debian6lt~$ ls -ld /dev/console /dev/sda
crw-------   1 root root  5, 1 Mar 15 12:45 /dev/console
brw-rw----   1 root disk  8, 0 Mar 15 12:45 /dev/sda</screen>
	<para>And here you can see a directory, a regular file and a symbolic link.</para>
	<screen>paul@debian6lt~$ ls -ld /etc /etc/hosts /etc/motd
drwxr-xr-x 128 root root 12288 Mar 15 18:34 /etc
-rw-r--r--   1 root root   372 Dec 10 17:36 /etc/hosts
lrwxrwxrwx   1 root root    13 Dec  5 10:36 /etc/motd -> /var/run/motd</screen>
</section>
<?hard-pagebreak?>
<section><title>permissions</title>
	<section><title>rwx</title>
		<para>The nine characters following the file type denote the permissions in three triplets. A permission can be <command>r</command> for read access, <command>w</command> for write access, and <command>x</command> for execute. You need the <command>r</command> permission to list (ls) the contents of a directory. You need the <command>x</command> permission to enter (cd) a directory. You need the <command>w</command> permission to create files in or remove files from a directory.</para>
<table frame='all'><title>standard Unix file permissions</title>
<?dbfo table-width="90%" ?>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>
<colspec colname='c1' colwidth="1*" align="center"/>
<colspec colname='c2' colwidth="2*" align="center"/>
<colspec colname='c3' colwidth="2*" align="center"/>
<thead>
<row>
  <entry>permission</entry>
  <entry>on a file</entry>
  <entry>on a directory</entry>
</row>
</thead>
<tbody>
<row>
  <entry>r (read)</entry>
  <entry>read file contents (cat)</entry>
  <entry>read directory contents (ls)</entry>
</row>
<row>
  <entry>w (write)</entry>
  <entry>change file contents (vi)</entry>
  <entry>create files in (touch)</entry>
</row>
<row>
  <entry>x (execute)</entry>
  <entry>execute the file</entry>
  <entry>enter the directory (cd)</entry>
</row>
</tbody>
</tgroup>
</table>
	</section>
	<section><title>three sets of rwx</title>
		<para>We already know that the output of <command>ls -l </command><indexterm><primary>ls</primary></indexterm> starts with ten characters for each file. This screenshot shows a regular file (because the first character is a - ).</para>
		<screen>paul@RHELv8u4:~/test$ ls -l proc42.bash
-rwxr-xr--  1 paul proj 984 Feb  6 12:01 proc42.bash</screen>
		<para>Below is a table describing the function of all ten characters.</para>
<table frame='all'><title>Unix file permissions position</title>
<?dbfo table-width="85%" ?>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>
<colspec colname='c1' colwidth="1*" align="center"/>
<colspec colname='c2' colwidth="1*" align="center"/>
<colspec colname='c3' colwidth="3*" align="center"/>
<thead>
<row>
  <entry>position</entry>
  <entry>characters</entry>
  <entry>function</entry>
</row>
</thead>
<tbody>
<row>
  <entry>1</entry>
  <entry>-</entry>
  <entry>this is a regular file</entry>
</row>
<row>
  <entry>2-4</entry>
  <entry>rwx</entry>
  <entry>permissions for the <command>user owner</command></entry>
</row>
<row>
  <entry>5-7</entry>
  <entry>r-x</entry>
  <entry>permissions for the <command>group owner</command></entry>
</row>
<row>
  <entry>8-10</entry>
  <entry>r--</entry>
  <entry>permissions for <command>others</command></entry>
</row>
</tbody>
</tgroup>
</table>
		<para>When you are the <command>user owner</command><indexterm><primary>owner</primary></indexterm> of a file, then the <command>user owner permissions</command> apply to you. The rest of the permissions have no influence on your access to the file.</para>
		<para>When you belong to the <command>group</command> that is the <command>group owner</command> of a file, then the <command>group owner permissions</command> apply to you. The rest of the permissions have no influence on your access to the file.</para>
		<para>When you are not the <command>user owner</command> of a file and you do not belong to the <command>group owner</command>, then the <command>others permissions</command> apply to you. The rest of the permissions have no influence on your access to the file.</para>
	</section>
<?hard-pagebreak?>
	<section><title>permission examples</title>
		<para>Some example combinations on files and directories are seen in this screenshot. The name of the file explains the permissions.</para>
	<screen>paul@laika:~/perms$ ls -lh
total 12K
drwxr-xr-x 2 paul paul 4.0K 2007-02-07 22:26 AllEnter_UserCreateDelete
-rwxrwxrwx 1 paul paul    0 2007-02-07 22:21 EveryoneFullControl.txt
-r--r----- 1 paul paul    0 2007-02-07 22:21 OnlyOwnersRead.txt
-rwxrwx--- 1 paul paul    0 2007-02-07 22:21 OwnersAll_RestNothing.txt
dr-xr-x--- 2 paul paul 4.0K 2007-02-07 22:25 UserAndGroupEnter
dr-x------ 2 paul paul 4.0K 2007-02-07 22:25 OnlyUserEnter
paul@laika:~/perms$</screen>
	<para>To summarise, the first <command>rwx</command> triplet represents the permissions for the <command>user owner</command>. The second triplet corresponds to the <command>group owner</command>; it specifies permissions for all members of that group. The third triplet defines permissions for all <command>other</command> users that are not the user owner and are not a member of the group owner.</para>
	</section>
<?hard-pagebreak?>
	<section><title>setting permissions (chmod)</title>
		<para>Permissions can be changed with <command>chmod</command><indexterm><primary>chmod(1)</primary></indexterm>. The first example gives the user owner execute permissions.</para>
		<screen>paul@laika:~/perms$ ls -l permissions.txt 
-rw-r--r-- 1 paul paul 0 2007-02-07 22:34 permissions.txt
paul@laika:~/perms$ chmod u+x permissions.txt 
paul@laika:~/perms$ ls -l permissions.txt 
-rwxr--r-- 1 paul paul 0 2007-02-07 22:34 permissions.txt</screen>
		<para>This example removes the group owners read permission.</para>
		<screen>paul@laika:~/perms$ chmod g-r permissions.txt 
paul@laika:~/perms$ ls -l permissions.txt 
-rwx---r-- 1 paul paul 0 2007-02-07 22:34 permissions.txt</screen>
		<para>This example removes the others read permission.</para>
		<screen>paul@laika:~/perms$ chmod o-r permissions.txt 
paul@laika:~/perms$ ls -l permissions.txt 
-rwx------ 1 paul paul 0 2007-02-07 22:34 permissions.txt</screen>
		<para>This example gives all of them the write permission.</para>
		<screen>paul@laika:~/perms$ chmod a+w permissions.txt 
paul@laika:~/perms$ ls -l permissions.txt 
-rwx-w--w- 1 paul paul 0 2007-02-07 22:34 permissions.txt</screen>
		<para>You don't even have to type the a.</para>
		<screen>paul@laika:~/perms$ chmod +x permissions.txt 
paul@laika:~/perms$ ls -l permissions.txt 
-rwx-wx-wx 1 paul paul 0 2007-02-07 22:34 permissions.txt</screen>
		<para>You can also set explicit permissions.</para>
		<screen>paul@laika:~/perms$ chmod u=rw permissions.txt 
paul@laika:~/perms$ ls -l permissions.txt 
-rw--wx-wx 1 paul paul 0 2007-02-07 22:34 permissions.txt</screen>
		<para>Feel free to make any kind of combination.</para>
		<screen>paul@laika:~/perms$ chmod u=rw,g=rw,o=r permissions.txt 
paul@laika:~/perms$ ls -l permissions.txt 
-rw-rw-r-- 1 paul paul 0 2007-02-07 22:34 permissions.txt</screen>
		<para>Even fishy combinations are accepted by chmod.</para>
		<screen>paul@laika:~/perms$ chmod u=rwx,ug+rw,o=r permissions.txt 
paul@laika:~/perms$ ls -l permissions.txt 
-rwxrw-r-- 1 paul paul 0 2007-02-07 22:34 permissions.txt</screen>
	</section>
<?hard-pagebreak?>
	<section><title>setting octal permissions</title>
		<para>Most Unix administrators will use the <command>old school</command><indexterm><primary>octal permissions</primary></indexterm> octal system to talk about and set permissions. Look at the triplet bitwise, equating r to 4, w to 2, and x to 1.</para>
<table frame='all'><title>Octal permissions</title>
<?dbfo table-width="50%" ?>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>
<colspec colname='c1' colwidth="1*" align="center"/>
<colspec colname='c2' colwidth="1*" align="center"/>
<colspec colname='c3' colwidth="1*" align="center"/>
<thead>
<row>
  <entry>binary</entry>
  <entry>octal</entry>
  <entry>permission</entry>
</row>
</thead>
<tbody>
<row>
  <entry>000</entry>
  <entry>0</entry>
  <entry>---</entry>
</row>
<row>
  <entry>001</entry>
  <entry>1</entry>
  <entry>--x</entry>
</row>
<row>
  <entry>010</entry>
  <entry>2</entry>
  <entry>-w-</entry>
</row>
<row>
  <entry>011</entry>
  <entry>3</entry>
  <entry>-wx</entry>
</row>
<row>
  <entry>100</entry>
  <entry>4</entry>
  <entry>r--</entry>
</row>
<row>
  <entry>101</entry>
  <entry>5</entry>
  <entry>r-x</entry>
</row>
<row>
  <entry>110</entry>
  <entry>6</entry>
  <entry>rw-</entry>
</row>
<row>
  <entry>111</entry>
  <entry>7</entry>
  <entry>rwx</entry>
</row>
</tbody>
</tgroup>
</table>
		<para>This makes <command>777</command><indexterm><primary>777</primary></indexterm> equal to rwxrwxrwx and by the same logic, 654 mean rw-r-xr-- . The <command>chmod</command><indexterm><primary>chmod</primary></indexterm> command will accept these numbers.</para>
		<screen>paul@laika:~/perms$ chmod 777 permissions.txt 
paul@laika:~/perms$ ls -l permissions.txt 
-rwxrwxrwx 1 paul paul 0 2007-02-07 22:34 permissions.txt
paul@laika:~/perms$ chmod 664 permissions.txt 
paul@laika:~/perms$ ls -l permissions.txt 
-rw-rw-r-- 1 paul paul 0 2007-02-07 22:34 permissions.txt
paul@laika:~/perms$ chmod 750 permissions.txt 
paul@laika:~/perms$ ls -l permissions.txt 
-rwxr-x--- 1 paul paul 0 2007-02-07 22:34 permissions.txt</screen>
	</section>
<?hard-pagebreak?>
	<section><title>umask</title>
		<para>When creating a file or directory, a set of default permissions are applied. These default permissions are determined by the <command>umask</command><indexterm><primary>umask(1)</primary></indexterm>. The <command>umask</command> specifies permissions that you do not want set on by default. You can display the <command>umask</command> with the <command>umask</command> command.</para>
		<screen>[Harry@RHEL4b ~]$ umask
0002
[Harry@RHEL4b ~]$ touch test
[Harry@RHEL4b ~]$ ls -l test
-rw-rw-r--  1 Harry Harry 0 Jul 24 06:03 test
[Harry@RHEL4b ~]$</screen>
		<para>As you can also see, the file is also not executable by default. This is a general security feature among Unixes; newly created files are never executable by default. You have to explicitly do a <command>chmod +x</command><indexterm><primary>chmod +x</primary></indexterm> to make a file executable. This also means that the 1 bit in the <command>umask</command> has no meaning--a <command>umask</command> of 0022 is the same as 0033.</para>
	</section>
	<section><title>mkdir -m</title>
		<para>When creating directories with <command>mkdir</command><indexterm><primary>mkdir(1)</primary></indexterm> you can use the <command>-m</command> option to set the <command>mode</command>. This screenshot explains.</para>
	<screen>paul@debian5~$ mkdir -m 700 MyDir
paul@debian5~$ mkdir -m 777 Public
paul@debian5~$ ls -dl MyDir/ Public/
drwx------ 2 paul paul 4096 2011-10-16 19:16 MyDir/
drwxrwxrwx 2 paul paul 4096 2011-10-16 19:16 Public/</screen>
	</section>
	<section><title>cp -p</title>
		<para>To preserve permissions and time stamps from source files, use <command>cp -p</command>.</para>
		<screen>paul@laika:~/perms$ cp file* cp
paul@laika:~/perms$ cp -p file* cpp
paul@laika:~/perms$ ll *
-rwx------ 1 paul paul    0 2008-08-25 13:26 file33
-rwxr-x--- 1 paul paul    0 2008-08-25 13:26 file42

cp:
total 0
-rwx------ 1 paul paul 0 2008-08-25 13:34 file33
-rwxr-x--- 1 paul paul 0 2008-08-25 13:34 file42

cpp:
total 0
-rwx------ 1 paul paul 0 2008-08-25 13:26 file33
-rwxr-x--- 1 paul paul 0 2008-08-25 13:26 file42</screen>
	</section>
</section>
