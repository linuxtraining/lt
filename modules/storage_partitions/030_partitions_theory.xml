<?hard-pagebreak?>
<section><title>about partitions</title>
	<section><title>primary, extended and logical</title>
		<para>Linux requires you to create one or more <command>partitions</command><indexterm><primary>partition</primary></indexterm>. The next paragraphs will explain how to create and use partitions.</para>
		<para>A partition's <command>geometry</command> and size is usually defined by a starting and ending cylinder (sometimes by sector). Partitions can be of type <command>primary</command><indexterm><primary>primary partition</primary></indexterm> (maximum four), <command>extended</command><indexterm><primary>extended partition</primary></indexterm> (maximum one) or <command>logical</command><indexterm><primary>logical drive</primary></indexterm> (contained within the extended partition). Each partition has a <command>type field</command> that contains a code. This determines the computers operating system or the partitions file system.</para>
<table frame='all'><title>primary, extended and logical partitions</title>
<?dbfo table-width="50%" ?>
<tgroup cols='2' align='left' colsep='1' rowsep='1'>
<colspec colname='c1' colwidth="3*" align="center"/>
<colspec colname='c2' colwidth="1*" align="center"/>
<thead>
<row>
  <entry>Partition Type</entry>
  <entry>naming</entry>
</row>
</thead>
<tbody>
<row>
  <entry>Primary (max 4)</entry>
  <entry>1-4</entry>
</row>
<row>
  <entry>Extended (max 1)</entry>
  <entry>1-4</entry>
</row>
<row>
  <entry>Logical</entry>
  <entry>5-</entry>
</row>
</tbody>
</tgroup>
</table>
	</section>
	<section><title>partition naming</title>
		<para>We saw before that hard disk devices are named /dev/hdx or /dev/sdx with x depending on the hardware configuration. Next is the partition number, starting the count at 1. Hence the four (possible) primary partitions are numbered 1 to 4. Logical partition counting always starts at 5. Thus /dev/hda2 is the second partition on the first ATA hard disk device, and /dev/hdb5 is the first logical partition on the second ATA hard disk device. Same for SCSI, /dev/sdb3 is the third partition on the second SCSI disk.</para>
<table frame='all'><title>Partition naming</title>
<?dbfo table-width="85%" ?>
<tgroup cols='2' align='left' colsep='1' rowsep='1'>
<colspec colname='c1' colwidth="2*" align="center"/>
<colspec colname='c2' colwidth="7*" align="center"/>
<thead>
<row>
  <entry>partition</entry>
  <entry>device</entry>
</row>
</thead>
<tbody>
<row>
  <entry>/dev/hda1</entry>
  <entry>first primary partition on /dev/hda</entry>
</row>
<row>
  <entry>/dev/hda2</entry>
  <entry>second primary or extended partition on /dev/hda</entry>
</row>
<row>
  <entry>/dev/sda5</entry>
  <entry>first logical drive on /dev/sda</entry>
</row>
<row>
  <entry>/dev/sdb6</entry>
  <entry>second logical on /dev/sdb</entry>
</row>
</tbody>
</tgroup>
</table>
	<para>The picture below shows two (spindle) disks with partitions. Note that an extended partition is a container holding logical drives.</para>
	<mediaobject><imageobject><imagedata fileref="images/storage_disk_partitions.png" format="EPS" align="center"></imagedata></imageobject></mediaobject>
	</section>
</section>
<?hard-pagebreak?>
<section><title>discovering partitions</title>
	<section><title>fdisk -l</title>
		<para>In the <command>fdisk -l</command><indexterm><primary>fdisk(1)</primary></indexterm> example below you can see that two partitions exist on <command>/dev/sdb</command>. The first partition spans 31 cylinders and contains a Linux swap partition. The second partition is much bigger.</para>
		<screen>
root@laika:~# fdisk -l /dev/sdb

Disk /dev/sdb: 100.0 GB, 100030242816 bytes
255 heads, 63 sectors/track, 12161 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes

   Device Boot    Start      End     Blocks   Id  System
/dev/sdb1             1       31     248976   82  Linux swap / Solaris
/dev/sdb2            32    12161   97434225   83  Linux
root@laika:~#		
		</screen>
	</section>
	<section><title>/proc/partitions</title>
		<para>The <command>/proc/partitions</command><indexterm><primary>/proc/partitions</primary></indexterm> file contains a table with major and minor number of partitioned devices, their number of blocks and the device name in <command>/dev</command><indexterm><primary>/dev</primary></indexterm>. Verify with <command>/proc/devices</command><indexterm><primary>/proc/devices</primary></indexterm> to link the major number to the proper device.</para>
		<screen>
paul@RHELv8u4:~$ cat /proc/partitions 
major minor  #blocks  name

   3     0     524288 hda
   3    64     734003 hdb
   8     0    8388608 sda
   8     1     104391 sda1
   8     2    8281507 sda2
   8    16    1048576 sdb
   8    32    1048576 sdc
   8    48    1048576 sdd
 253     0    7176192 dm-0
 253     1    1048576 dm-1
		</screen>
		<para>The <command>major</command><indexterm><primary>major number</primary></indexterm> number corresponds to the device type (or driver) and can be found in <command>/proc/devices</command><indexterm><primary>/proc/devices</primary></indexterm>. In this case 3 corresponds to <command>ide</command><indexterm><primary>ide</primary></indexterm> and 8 to <command>sd</command>. The <command>major</command> number determines the <command>device driver</command><indexterm><primary>device driver</primary></indexterm> to be used with this device.</para>
		<para>The <command>minor</command><indexterm><primary>minor number</primary></indexterm> number is a unique identification of an instance of this device type. The <command>devices.txt</command><indexterm><primary>devices.txt</primary></indexterm> file in the kernel tree contains a full list of major and minor numbers.</para>
	</section>
<?hard-pagebreak?>
	<section><title>parted and others</title>
		<para>You may be interested in alternatives to <command>fdisk</command> like <command>parted</command>, <command>cfdisk</command>, <command>sfdisk</command> and <command>gparted</command>. This course mainly uses <command>fdisk</command> to partition hard disks.</para>
		<para><command>parted</command> is recommended by some Linux distributions for handling storage with <command>gpt</command> instead of <command>mbr</command>.</para>
		<para>Below a screenshot of <command>parted</command> on CentOS.</para>
		<screen>[root@centos65 ~]# <command>rpm -q parted</command>
parted-2.1-21.el6.x86_64
[root@centos65 ~]# <command>parted /dev/sda</command>
GNU Parted 2.1
Using /dev/sda
Welcome to GNU Parted! Type 'help' to view a list of commands.
(parted) <command>print</command>
Model: ATA VBOX HARDDISK (scsi)
Disk /dev/sda: 42.9GB
Sector size (logical/physical): 512B/512B
Partition Table: msdos

Number  Start   End     Size    Type     File system  Flags
 1      1049kB  525MB   524MB   primary  ext4         boot
 2      525MB   42.9GB  42.4GB  primary               lvm

(parted)</screen>
	</section>
</section>
<?hard-pagebreak?>
<section><title>partitioning new disks</title>
	<para>In the example below, we bought a new disk for our system. After the new hardware is properly attached, you can use <command>fdisk</command> and <command>parted</command><indexterm><primary>parted(1)</primary></indexterm> to create the necessary partition(s). This example uses <command>fdisk</command>, but there is nothing wrong with using <command>parted</command>.</para>
	<section><title>recognising the disk</title>
	<para>First, we check with <command>fdisk -l</command> whether Linux can see the new disk. Yes it does, the new disk is seen as /dev/sdb, but it does not have any partitions yet.</para>
	<screen>root@RHELv8u2:~# fdisk -l
		
Disk /dev/sda: 12.8 GB, 12884901888 bytes
255 heads, 63 sectors/track, 1566 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
		
Device Boot      Start      End      Blocks   Id  System
/dev/sda1   *       1        13      104391   83  Linux
/dev/sda2          14      1566    12474472+  8e  Linux LVM
		
Disk /dev/sdb: 1073 MB, 1073741824 bytes
255 heads, 63 sectors/track, 130 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
		
Disk /dev/sdb doesn't contain a valid partition table
		</screen>
	</section>
	<section><title>opening the disk with fdisk</title>
		<para>Then we create a partition with fdisk on /dev/sdb. First we start the fdisk tool with /dev/sdb as argument. Be very very careful not to partition the wrong disk!!</para>
		<screen>
root@RHELv8u2:~# fdisk /dev/sdb
Device contains neither a valid DOS partition table, nor Sun, SGI...
Building a new DOS disklabel. Changes will remain in memory only,
until you decide to write them. After that, of course, the previous
content won't be recoverable.
		
Warning: invalid flag 0x0000 of partition table 4 will be corrected...
		</screen>
	</section>
	<section><title>empty partition table</title>
		<para>Inside the fdisk tool, we can issue the <command>p</command><indexterm><primary>fdisk(1)</primary></indexterm> command to see the current disks partition table.</para>
		<screen>Command (m for help): p
		
Disk /dev/sdb: 1073 MB, 1073741824 bytes
255 heads, 63 sectors/track, 130 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
		
Device Boot      Start         End      Blocks   Id  System</screen>
	</section>
	<section><title>create a new partition</title>
		<para>No partitions exist yet, so we issue <command>n</command> to create a new partition. We choose p for primary, 1 for the partition number, 1 for the start cylinder and 14 for the end cylinder.</para>
		<screen>Command (m for help): n
Command action
e   extended
p   primary partition (1-4)
p
Partition number (1-4): 1
First cylinder (1-130, default 1): 
Using default value 1
Last cylinder or +size or +sizeM or +sizeK (1-130, default 130): 14</screen>
		<para>We can now issue p again to verify our changes, but they are not yet written to disk. This means we can still cancel this operation! But it looks good, so we use <command>w</command> to write the changes to disk, and then quit the fdisk tool.</para>
		<screen>Command (m for help): p
	
Disk /dev/sdb: 1073 MB, 1073741824 bytes
255 heads, 63 sectors/track, 130 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
		
Device Boot      Start         End      Blocks   Id  System
/dev/sdb1               1          14      112423+  83  Linux
		
Command (m for help): w
The partition table has been altered!
		
Calling ioctl() to re-read partition table.
Syncing disks.
root@RHELv8u2:~#</screen>
	</section>
	<section><title>display the new partition</title>
		<para>Let's verify again with <command>fdisk -l</command><indexterm><primary>fdisk(1)</primary></indexterm> to make sure reality fits our dreams. Indeed, the screenshot below now shows a partition on /dev/sdb. </para>
		<screen>
root@RHELv8u2:~# fdisk -l
		
Disk /dev/sda: 12.8 GB, 12884901888 bytes
255 heads, 63 sectors/track, 1566 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
		
Device Boot      Start        End      Blocks   Id  System
/dev/sda1   *        1         13      104391   83  Linux
/dev/sda2           14       1566    12474472+  8e  Linux LVM
		
Disk /dev/sdb: 1073 MB, 1073741824 bytes
255 heads, 63 sectors/track, 130 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
		
Device Boot      Start         End      Blocks   Id  System
/dev/sdb1               1          14      112423+  83  Linux
root@RHELv8u2:~#</screen>
	</section>
</section>
<?hard-pagebreak?>
<section><title>about the partition table</title>
	<section><title>master boot record</title>
		<para>The <command>partition table</command><indexterm><primary>partition table</primary></indexterm> information (primary and extended partitions) is written in the <command>master boot record</command><indexterm><primary>master boot record</primary></indexterm> or <command>mbr</command><indexterm><primary>mbr</primary></indexterm>. You can use <command>dd</command><indexterm><primary>dd(1)</primary></indexterm> to copy the mbr to a file.</para>
		<para>This example copies the master boot record from the first SCSI hard disk.</para>
		<screen>dd if=/dev/sda of=/SCSIdisk.mbr bs=512 count=1</screen>
		<para>The same tool can also be used to wipe out all information about partitions on a disk. This example writes zeroes over the master boot record.</para>
		<screen>dd if=/dev/zero of=/dev/sda bs=512 count=1</screen>
		<para>Or to wipe out the whole partition or disk.</para>
		<screen>dd if=/dev/zero of=/dev/sda</screen>
	</section>
	<section><title>partprobe</title>
		<para>Don't forget that after restoring a <command>master boot record</command> with <command>dd</command>, that you need to force the kernel to reread the partition table with <command>partprobe</command><indexterm><primary>partprobe(1)</primary></indexterm>. After running <command>partprobe</command>, the partitions can be used again.</para>
		<screen>[root@RHEL5 ~]# partprobe 
[root@RHEL5 ~]#</screen>
	</section>
	<section><title>logical drives</title>
		<para>The <command>partition table</command><indexterm><primary>partition table</primary></indexterm> does not contain information about <command>logical drives</command><indexterm><primary>logical drives</primary></indexterm>. So the <command>dd</command> backup of the <command>mbr</command><indexterm><primary>mbr</primary></indexterm> only works for primary and extended partitions. To backup the partition table including the logical drives, you can use <command>sfdisk</command><indexterm><primary>sfdisk(1)</primary></indexterm>.</para>
		<para>This example shows how to backup all partition and logical drive information to a file.</para>
		<screen>sfdisk -d /dev/sda &#062; parttable.sda.sfdisk</screen>
		<para>The following example copies the <command>mbr</command> and all <command>logical drive</command> info from /dev/sda to /dev/sdb.</para>
		<screen>sfdisk -d /dev/sda | sfdisk /dev/sdb</screen>
	</section>
</section>
<?hard-pagebreak?>
<section><title>GUID partition table</title>
	<para><command>gpt</command> was developed because of the limitations of the 1980s <command>mbr</command> partitioning scheme (for example only four partitions can be defined, and they have a  maximum size two terabytes).</para>
	<para>Since 2010 <command>gpt</command> is a part of the <command>uefi</command><indexterm><primary>uefi</primary></indexterm> specification, but it is also used on <command>bios</command> systems.</para>
	<para>Newer versions of <command>fdisk</command> work fine with <command>gpt</command>, but most production servers today (mid 2015) still have an older <command>fdisk.</command>. You can use <command>parted</command> instead.</para>
</section>
<section><title>labeling with parted</title>
<para><command>parted</command> is an interactive tool, just like <command>fdisk</command><indexterm><primary>fdisk limitations</primary></indexterm>. Type <command>help</command> in <command>parted</command> for a list of commands and options.</para>
<para>This screenshot shows how to start <command>parted</command><indexterm><primary>parted</primary></indexterm> to manage partitions on <command>/dev/sdb</command>.</para>
<screen>[root@rhel71 ~]# <command>parted /dev/sdb</command>
GNU Parted 3.1
Using /dev/sdb
Welcome to GNU Parted! Type 'help' to view a list of commands.
(parted)</screen>
<para>Each command also has built-in help. For example <command>help mklabel</command> will list all supported labels. Note that we only discussed <command>mbr</command>(msdos) and <command>gpt</command><indexterm><primary>gpt</primary></indexterm> in this book.</para>
<screen>(parted) <command>help mklabel</command>
 mklabel,mktable LABEL-TYPE             create a new disklabel (partition table)

    LABEL-TYPE is one of: aix, amiga, bsd, dvh, gpt, mac, msdos, pc98, sun, loop
(parted)</screen>
<para>We create an <command>mbr</command><indexterm><primary>mbr</primary></indexterm> label.</para>
<screen>(parted) <command>mklabel msdos</command>>
Warning: The existing disk label on /dev/sdb will be destroyed and all data on
this disk will be lost. Do you want to continue?
Yes/No? yes
(parted) <command>mklabel gpt</command>
Warning: The existing disk label on /dev/sdb will be destroyed and all data on
this disk will be lost. Do you want to continue?
Yes/No? Y
(parted)</screen>
<?hard-pagebreak?>
<section><title>partitioning with parted</title>
<para>Once labeled it is easy to create partitions with <command>parted</command><indexterm><primary>parted</primary></indexterm>. This screenshot starts with an unpartitioned (but <command>gpt</command> labeled) disk.</para>
<screen>(parted) <command>print</command>
Model: ATA VBOX HARDDISK (scsi)
Disk /dev/sdb: 8590MB
Sector size (logical/physical): 512B/512B
Partition Table: gpt
Disk Flags:

Number  Start  End  Size  File system  Name  Flags

(parted)</screen>
<para>This example shows how to create two primary partitions of equal size.</para>
<screen>(parted) <command>mkpart primary 0 50%</command>
Warning: The resulting partition is not properly aligned for best performance.
Ignore/Cancel? I
(parted) <command>mkpart primary 50% 100%</command>
(parted)</screen>
<para>Verify with <command>print</command> and exit with <command>quit</command>. Since <command>parted</command> works directly on the disk, there is no need to <command>w(rite)</command> like in <command>fdisk</command>.</para>
<screen>(parted) <command>print</command>
Model: ATA VBOX HARDDISK (scsi)
Disk /dev/sdb: 8590MB
Sector size (logical/physical): 512B/512B
Partition Table: gpt
Disk Flags:

Number  Start   End     Size    File system  Name     Flags
 1      17.4kB  4295MB  4295MB               primary
 2      4295MB  8589MB  4294MB               primary

(parted) <command>quit</command>
Information: You may need to update /etc/fstab.

[root@rhel71 ~]#</screen>
</section>
</section>
