<?hard-pagebreak?>
<section><title>to gui or not to gui</title>
	<para>Recent Linux distributions often include a graphical application to configure the network. Some people complain that these applications mess networking configurations up when used simultaneously with command line configurations. Notably <command>Network Manager</command> (often replaced by <command>wicd</command>) and <command>yast</command> are known to not care about configuration changes via the command line.</para>
	<para>Since the goal of this course is <command>server</command> administration, we will assume our Linux servers are always administered through the command line.</para>
	<para>This chapter only focuses on using the command line for network interface configuration!</para>
	<para>Unfortunately there is no single combination of Linux commands and <command>/etc</command> files that works on all Linux distributions. We discuss networking on two (large but distinct) Linux distribution families.</para>
	<para>We start with <command>Debian</command> (this should also work on Ubuntu and Mint), then continue with <command>RHEL</command> (which is identical to CentOS and Fedora).</para>
</section>
<?hard-pagebreak?>
<section><title>Debian nic configuration</title>
<section><title>/etc/network/interfaces</title>
	<para>The <command>/etc/network/interfaces</command><indexterm><primary>/etc/network/interfaces</primary></indexterm> file is a core network interface card configuration file on <command>debian</command>.</para>
	<section><title>dhcp client</title>
		<para>The screenshot below shows that our computer is configured for <command>dhcp</command><indexterm><primary>dhcp client</primary></indexterm> on <command>eth0</command><indexterm><primary>eth0</primary></indexterm> (the first network interface card or nic).</para>
		<screen>paul@debian8:~$ <command>cat /etc/network/interfaces</command>
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# The loopback network interface
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp</screen>
		<para>Configuring network cards for <command>dhcp</command> is good practice for clients, but servers usually require a <command>fixed ip address</command>.</para>
	</section>
	<section><title>fixed ip</title>
		<para>The screenshot below shows <command>/etc/network/interfaces</command> configured with a <command>fixed ip address</command><indexterm><primary>fixed ip address</primary></indexterm>.</para>
		<screen>rootdebian9~# <command>cat /etc/network/interfaces</command>
auto lo
iface lo inet loopback

auto  eth0
iface eth0 inet static
address   10.42.189.198
broadcast 10.42.189.207
netmask   255.255.255.240
gateway   10.42.189.193</screen>
		<para>The screenshot above also shows that you can provide more configuration than just the ip address. See <command>interfaces(5)</command> for help on setting a <command>gateway</command>, <command>netmask</command> or any of the other options.</para>
	</section>
</section>
<?hard-pagebreak?>
<section><title>/sbin/ifdown</title>
	<para>It is adviced (but not mandatory) to down an interface before changing its configuration. This can be done with the <command>ifdown</command><indexterm><primary>ifdown(1)</primary></indexterm> command.</para>
	<para>The command will not give any output when downing an interface with a fixed ip address. However <command>ifconfig</command> will no longer show the interface.</para>
	<screen>root@ubu1104srv:~# <command>ifdown eth0</command>
root@ubu1104srv:~# <command>ifconfig</command>
lo   Link encap:Local Loopback  
     inet addr:127.0.0.1  Mask:255.0.0.0
     inet6 addr: ::1/128 Scope:Host
     UP LOOPBACK RUNNING  MTU:16436  Metric:1
     RX packets:106 errors:0 dropped:0 overruns:0 frame:0
     TX packets:106 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:0 
     RX bytes:11162 (11.1 KB)  TX bytes:11162 (11.1 KB)</screen>
	<para>An interface that is down cannot be used to connect to the network.</para>
</section>
<section><title>/sbin/ifup</title>
	<para>Below a screenshot of <command>ifup</command><indexterm><primary>ifup(1)</primary></indexterm> bringing the <command>eth0</command> ethernet interface up using dhcp. (Note that this is a Ubuntu 10.10 screenshot, Ubuntu 11.04 omits <command>ifup</command> output by default.)</para>
	<screen>root@ubu1010srv:/etc/network# ifup eth0
Internet Systems Consortium DHCP Client V3.1.3
Copyright 2004-2009 Internet Systems Consortium.
All rights reserved.
For info, please visit https://www.isc.org/software/dhcp/

Listening on LPF/eth0/08:00:27:cd:7f:fc
Sending on   LPF/eth0/08:00:27:cd:7f:fc
Sending on   Socket/fallback
DHCPREQUEST of 192.168.1.34 on eth0 to 255.255.255.255 port 67
DHCPNAK from 192.168.33.100
DHCPDISCOVER on eth0 to 255.255.255.255 port 67 interval 3
DHCPOFFER of 192.168.33.77 from 192.168.33.100
DHCPREQUEST of 192.168.33.77 on eth0 to 255.255.255.255 port 67
DHCPACK of 192.168.33.77 from 192.168.33.100
bound to 192.168.33.77 -- renewal in 95 seconds.
ssh stop/waiting
ssh start/running, process 1301
root@ubu1010srv:/etc/network#</screen>
	<para>The details of <command>dhcp</command> are covered in a separate chapter in the <command>Linux Servers</command> course.</para>
</section>
</section>
<?hard-pagebreak?>
<section><title>RHEL nic configuration</title>
	<section><title>/etc/sysconfig/network</title>
		<para>The <command>/etc/sysconfig/network</command><indexterm><primary>/etc/sysconfig/network</primary></indexterm> file is a global (across all network cards) configuration file. It allows us to define whether we want networking (NETWORKING=yes|no), what the hostname should be (HOSTNAME=) and which gateway to use (GATEWAY=).</para>
		<screen>[rootrhel610 ~]# <command>cat /etc/sysconfig/network</command>
NETWORKING=yes
HOSTNAME=rhel6
GATEWAY=192.168.1.1</screen>
		<para>There are a dozen more options settable in this file, details can be found in <command>/usr/share/doc/initscripts-*/sysconfig.txt</command><indexterm><primary>/usr/share/doc</primary></indexterm>.</para>
		<para>Note that this file contains no settings at all in a default RHEL7 install (with networking enabled).</para>
		<screen>[root@rhel71 ~]# <command>cat /etc/sysconfig/network</command>
# Created by anaconda</screen>
	</section>
	<section><title>/etc/sysconfig/network-scripts/ifcfg-</title>
		<para>Each network card can be configured individually using the <command>/etc/sysconfig/network-scripts/ifcfg-*</command><indexterm><primary>/etc/sysconfig/network-scripts/</primary></indexterm> files. When you have only one network card, then this will probably be <command>/etc/sysconfig/network-scripts/ifcfg-eth0</command>.</para>
	<section><title>dhcp client</title>
		<para>Below a screenshot of <command>/etc/sysconfig/network-scripts/ifcfg-eth0</command> configured for dhcp (BOOTPROTO="dhcp"). Note also the NM_CONTROLLED paramater to disable control of this nic by <command>Network Manager</command>. This parameter is not explained (not even mentioned) in <command>/usr/share/doc/initscripts-*/sysconfig.txt</command>, but many others are.</para>
		<screen>[rootrhel610 ~]# <command>cat /etc/sysconfig/network-scripts/ifcfg-eth0</command>
DEVICE="eth0"
HWADDR="08:00:27:DD:0D:5C"
NM_CONTROLLED="no"
BOOTPROTO="dhcp"
ONBOOT="yes"</screen>
		<para>The BOOTPROTO variable can be set to either <command>dhcp</command><indexterm><primary>dhcp</primary></indexterm> or <command>bootp</command><indexterm><primary>bootp</primary></indexterm>, anything else will be considered <command>static</command> meaning there should be no protocol used at boot time to set the interface values.</para>
		<para>RHEL7 adds <command>ipv6</command> variables to this file.</para>
		<screen>[root@rhel71 network-scripts]# <command>cat ifcfg-enp0s3</command>
TYPE="Ethernet"
BOOTPROTO="dhcp"
DEFROUTE="yes"
PEERDNS="yes"
PEERROUTES="yes"
IPV4_FAILURE_FATAL="no"
IPV6INIT="yes"
IPV6_AUTOCONF="yes"
IPV6_DEFROUTE="yes"
IPV6_PEERDNS="yes"
IPV6_PEERROUTES="yes"
IPV6_FAILURE_FATAL="no"
NAME="enp0s3"
UUID="9fa6a83a-2f8e-4ecc-962c-5f614605f4ee"
DEVICE="enp0s3"
ONBOOT="yes"
[root@rhel71 network-scripts]#</screen>
	</section>
	<section><title>fixed ip</title>
		<para>Below a screenshot of a <command>fixed ip</command><indexterm><primary>fixed ip</primary></indexterm> configuration in <command>/etc/sysconfig/network-scripts/ifcfg-eth0</command>.</para>
		<screen>[rootrhel610 ~]# <command>cat /etc/sysconfig/network-scripts/ifcfg-eth0</command>
DEVICE="eth0"
HWADDR="08:00:27:DD:0D:5C"
NM_CONTROLLED="no"
BOOTPROTO="none"
IPADDR="192.168.1.99"
NETMASK="255.255.255.0"
GATEWAY="192.168.1.1"
ONBOOT="yes"</screen>
		<para>The HWADDR can be used to make sure that each network card gets the correct name when multiple network cards are present in the computer. It can not be used to assign a <command>mac address</command> to a network card. For this, you need to specify the MACADDR variable. Do not use HWADDR and MACADDR in the same <command>ifcfg-ethx</command><indexterm><primary>ifcfg-eth0</primary></indexterm> file.</para>
		<para>The BROADCAST= and NETWORK= parameters from previous RHEL/Fedora versions are obsoleted.</para>
	</section>
	</section>
	<section><title>nmcli</title>
		<para>On RHEL7 you should run <command>nmcli connection reload</command> if you changed configuration files in <command>/etc/sysconfig/</command> to enable your changes.</para>
		<para>The <command>nmcli</command> tool has many options to configure networking on the command line in RHEL7/CentOS7</para>
		<screen>man nmcli</screen>
	</section>
	<section><title>nmtui</title>
		<para>Another recommendation for RHEL7/CentOS7 is to use <command>nmtui</command>. This tool will use a 'windowed' interface in command line to manage network interfaces.</para>
		<screen>nmtui</screen>
	</section>
<?hard-pagebreak?>
	<section><title>/sbin/ifup and /sbin/ifdown</title>
		<para>The <command>ifup</command><indexterm><primary>ifup(1)</primary></indexterm> and <command>ifdown</command><indexterm><primary>ifdown(1)</primary></indexterm> commands will set an interface up or down, using the configuration discussed above. This is identical to their behaviour in Debian and Ubuntu.</para>
		<screen>[rootrhel610 ~]# ifdown eth0 &#038;&#038; ifup eth0
[rootrhel610 ~]# ifconfig eth0
eth0 Link encap:Ethernet  HWaddr 08:00:27:DD:0D:5C  
     inet addr:192.168.1.99  Bcast:192.168.1.255  Mask:255.255.255.0
     inet6 addr: fe80::a00:27ff:fedd:d5c/64 Scope:Link
     UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
     RX packets:2452 errors:0 dropped:0 overruns:0 frame:0
     TX packets:1881 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:1000 
     RX bytes:257036 (251.0 KiB)  TX bytes:184767 (180.4 KiB)</screen>
	</section>
</section>
<section><title>ifconfig</title>
		<para>The use of <command>/sbin/ifconfig</command><indexterm><primary>ifconfig(1)</primary></indexterm> without any arguments will present you with a list of all active network interface cards, including wireless and the loopback interface. In the screenshot below <command>eth0</command> has no ip address.</para>
		<screen>root@ubu1010:~# ifconfig 
eth0 Link encap:Ethernet  HWaddr 00:26:bb:5d:2e:52  
     UP BROADCAST MULTICAST  MTU:1500  Metric:1
     RX packets:0 errors:0 dropped:0 overruns:0 frame:0
     TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:1000 
     RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
     Interrupt:43 Base address:0xe000 

eth1 Link encap:Ethernet  HWaddr 00:26:bb:12:7a:5e  
     inet addr:192.168.1.30  Bcast:192.168.1.255  Mask:255.255.255.0
     inet6 addr: fe80::226:bbff:fe12:7a5e/64 Scope:Link
     UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
     RX packets:11141791 errors:202 dropped:0 overruns:0 frame:11580126
     TX packets:6473056 errors:3860 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:1000 
     RX bytes:3476531617 (3.4 GB)  TX bytes:2114919475 (2.1 GB)
     Interrupt:23 

lo   Link encap:Local Loopback  
     inet addr:127.0.0.1  Mask:255.0.0.0
     inet6 addr: ::1/128 Scope:Host
     UP LOOPBACK RUNNING  MTU:16436  Metric:1
     RX packets:2879 errors:0 dropped:0 overruns:0 frame:0
     TX packets:2879 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:0 
     RX bytes:486510 (486.5 KB)  TX bytes:486510 (486.5 KB)</screen>
		<para>You can also use <command>ifconfig</command> to obtain information about just one network card.</para>
		<screen>[rootrhel610 ~]# ifconfig eth0
eth0 Link encap:Ethernet  HWaddr 08:00:27:DD:0D:5C  
     inet addr:192.168.1.99  Bcast:192.168.1.255  Mask:255.255.255.0
     inet6 addr: fe80::a00:27ff:fedd:d5c/64 Scope:Link
     UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
     RX packets:2969 errors:0 dropped:0 overruns:0 frame:0
     TX packets:1918 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:1000 
     RX bytes:335942 (328.0 KiB)  TX bytes:190157 (185.7 KiB)</screen>
	<para>When <command>/sbin</command><indexterm><primary>/sbin</primary></indexterm> is not in the <command>$PATH</command> of a normal user you will have to type the full path, as seen here on Debian.</para>
	<screen>paul@debian5:~$ /sbin/ifconfig eth3
eth3 Link encap:Ethernet  HWaddr 08:00:27:ab:67:30  
     inet addr:192.168.1.29  Bcast:192.168.1.255  Mask:255.255.255.0
     inet6 addr: fe80::a00:27ff:feab:6730/64 Scope:Link
     UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
     RX packets:27155 errors:0 dropped:0 overruns:0 frame:0
     TX packets:30527 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:1000 
     RX bytes:13095386 (12.4 MiB)  TX bytes:25767221 (24.5 MiB)</screen>
	<section><title>up and down</title>
		<para>You can also use <command>ifconfig</command><indexterm><primary>ifconfig(1)</primary></indexterm> to bring an interface up or down. The difference with <command>ifup</command><indexterm><primary>ifup(1)</primary></indexterm> is that <command>ifconfig eth0 up</command> will re-activate the nic keeping its existing (current) configuration, whereas <command>ifup</command> will read the correct file that contains a (possibly new) configuration and use this config file to bring the interface up.</para>
		<screen>[rootrhel610 ~]# ifconfig eth0 down
[rootrhel610 ~]# ifconfig eth0 up
[rootrhel610 ~]# ifconfig eth0
eth0 Link encap:Ethernet  HWaddr 08:00:27:DD:0D:5C
     inet addr:192.168.1.99  Bcast:192.168.1.255  Mask:255.255.255.0
     inet6 addr: fe80::a00:27ff:fedd:d5c/64 Scope:Link
     UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
     RX packets:2995 errors:0 dropped:0 overruns:0 frame:0
     TX packets:1927 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:1000 
     RX bytes:339030 (331.0 KiB)  TX bytes:191583 (187.0 KiB)</screen>
	</section>
	<section><title>setting ip address</title>
		<para>You can <command>temporary</command> set an ip address with <command>ifconfig</command>. This ip address is only valid until the next <command>ifup/ifdown</command><indexterm><primary>ifdown(1)</primary></indexterm> cycle or until the next <command>reboot</command>.</para>
		<screen>[rootrhel610 ~]# ifconfig eth0 | grep 192
     inet addr:192.168.1.99  Bcast:192.168.1.255  Mask:255.255.255.0
[rootrhel610 ~]# ifconfig eth0 192.168.33.42 netmask 255.255.0.0
[rootrhel610 ~]# ifconfig eth0 | grep 192
     inet addr:192.168.33.42  Bcast:192.168.255.255  Mask:255.255.0.0
[rootrhel610 ~]# ifdown eth0 &#038;&#038; ifup eth0
[rootrhel610 ~]# ifconfig eth0 | grep 192
     inet addr:192.168.1.99  Bcast:192.168.1.255  Mask:255.255.255.0</screen>
	</section>
	<section><title>setting mac address</title>
		<para>You can also use <command>ifconfig</command> to set another <command>mac address</command><indexterm><primary>mac address</primary></indexterm> than the one hard coded in the network card. This screenshot shows you how.</para>
		<screen>[rootrhel610 ~]# ifconfig eth0 | grep HWaddr
eth0 Link encap:Ethernet  HWaddr 08:00:27:DD:0D:5C  
[rootrhel610 ~]# ifconfig eth0 hw ether 00:42:42:42:42:42
[rootrhel610 ~]# ifconfig eth0 | grep HWaddr
eth0 Link encap:Ethernet  HWaddr 00:42:42:42:42:42</screen>
	</section>
</section>
<section><title>ip</title>
	<para>The <command>ifconfig</command> tool is deprecated on some systems. Use the <command>ip</command> tool instead.</para>
	<para>To see ip addresses on RHEL7 for example, use this command:</para>
	<screen>[root@rhel71 ~]# <command>ip a</command>
1: lo: &#060;LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: enp0s3: &#060;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 08:00:27:89:22:33 brd ff:ff:ff:ff:ff:ff
    inet 192.168.1.135/24 brd 192.168.1.255 scope global dynamic enp0s3
       valid_lft 6173sec preferred_lft 6173sec
    inet6 fe80::a00:27ff:fe89:2233/64 scope link
       valid_lft forever preferred_lft forever
[root@rhel71 ~]#</screen>
</section>
<?hard-pagebreak?>
<section><title>dhclient</title>
	<para>Home and client Linux desktops often have <command>/sbin/dhclient</command><indexterm><primary>dhclient(1)</primary></indexterm> running. This is a daemon that enables a network interface to lease an ip configuration from a <command>dhcp server</command><indexterm><primary>dhcp client</primary></indexterm>. When your adapter is configured for <command>dhcp</command> or <command>bootp</command>, then <command>/sbin/ifup</command> will start the <command>dhclient</command> daemon.</para>
	<para>When a lease is renewed, <command>dhclient</command> will override your <command>ifconfig</command> set ip address!</para>
</section>
<section><title>hostname</title>
	<para>Every host receives a <command>hostname</command><indexterm><primary>hostname</primary></indexterm>, often placed in a <command>DNS name space</command> forming the <command>fqdn</command><indexterm><primary>FQDN</primary></indexterm> or Fully Qualified Domain Name.</para>
	<para>This screenshot shows the <command>hostname</command> command and the configuration of the hostname on Red Hat/Fedora.</para>
	<screen>[rootrhel610 ~]# <command>grep HOSTNAME /etc/sysconfig/network</command>
HOSTNAME=rhel6
[rootrhel610 ~]# <command>hostname</command>
rhel6</screen>
	<para>Starting with RHEL7/CentOS7 this file is empty. The hostname is configured in the standard <command>/etc/hostname</command> file.</para>
	<screen>[root@rhel71 ~]# <command>cat /etc/hostname</command>
rhel71.linux-training.be
[root@rhel71 ~]#</screen>
	<para>Ubuntu/Debian uses the <command>/etc/hostname</command><indexterm><primary>/etc/hostname</primary></indexterm> file to configure the <command>hostname</command>.</para>
	<screen>paul@debian8:~$ <command>cat /etc/hostname</command>
server42
paul@debian8:~$ <command>hostname</command>
server42</screen>
	<para>On all Linux distributions you can change the <command>hostname</command><indexterm><primary>hostname(1)</primary></indexterm> using the <command>hostname $newname</command> command. This is not a permanent change.</para>
	<screen>[rootrhel610 ~]# hostname server42
[rootrhel610 ~]# hostname
server42</screen>
	<para>On any Linux you can use <command>sysctl</command><indexterm><primary>sysctl(1)</primary></indexterm> to display and set the hostname.</para>
	<screen>[rootrhel610 ~]# sysctl kernel.hostname
kernel.hostname = server42
[rootrhel610 ~]# sysctl kernel.hostname=rhel6
kernel.hostname = rhel6
[rootrhel610 ~]# sysctl kernel.hostname
kernel.hostname = rhel6
[rootrhel610 ~]# hostname
rhel6</screen>
</section>
<?hard-pagebreak?>
<section><title>arp</title>
	<para>The <command>ip to mac</command> resolution is handled by the <command>layer two broadcast</command> protocol <command>arp</command><indexterm><primary>arp(1)</primary></indexterm>. The <command>arp table</command> can be displayed with the <command>arp tool</command>. The screenshot below shows the list of computers that this computer recently communicated with.</para>
	<screen>root@barry:~# arp -a
? (192.168.1.191) at 00:0C:29:3B:15:80 [ether] on eth1
agapi (192.168.1.73) at 00:03:BA:09:7F:D2 [ether] on eth1
anya (192.168.1.1) at 00:12:01:E2:87:FB [ether] on eth1
faith (192.168.1.41) at 00:0E:7F:41:0D:EB [ether] on eth1
kiss (192.168.1.49) at 00:D0:E0:91:79:95 [ether] on eth1
laika (192.168.1.40) at 00:90:F5:4E:AE:17 [ether] on eth1
pasha (192.168.1.71) at 00:03:BA:02:C3:82 [ether] on eth1
shaka (192.168.1.72) at 00:03:BA:09:7C:F9 [ether] on eth1
root@barry:~#</screen>
	<para><emphasis>Anya is a Cisco Firewall, faith is a laser printer, kiss is a Kiss DP600, laika is a laptop and Agapi, Shaka and Pasha are SPARC servers. The question mark is a Red Hat Enterprise Linux server running on a virtual machine.</emphasis></para>
	<para>You can use <command>arp -d</command> to remove an entry from the <command>arp table</command><indexterm><primary>arp table</primary></indexterm>.</para>
	<screen>[rootrhel610 ~]# arp
Address             HWtype  HWaddress           Flags Mask       Iface
ubu1010             ether   00:26:bb:12:7a:5e   C                eth0
anya                ether   00:02:cf:aa:68:f0   C                eth0
[rootrhel610 ~]# arp -d anya
[rootrhel610 ~]# arp
Address             HWtype  HWaddress           Flags Mask       Iface
ubu1010             ether   00:26:bb:12:7a:5e   C                eth0
anya                        (incomplete)                         eth0
[rootrhel610 ~]# ping anya
PING anya (192.168.1.1) 56(84) bytes of data.
64 bytes from anya (192.168.1.1): icmp_seq=1 ttl=254 time=10.2 ms
...
[rootrhel610 ~]# arp
Address             HWtype  HWaddress           Flags Mask       Iface
ubu1010             ether   00:26:bb:12:7a:5e   C                eth0
anya                ether   00:02:cf:aa:68:f0   C                eth0</screen>
</section>
<?hard-pagebreak?>
<section><title>route</title>
	<para>You can see the computer's local routing table with the <command>/sbin/route</command><indexterm><primary>route(1)</primary></indexterm> command (and also with <command>netstat -r</command><indexterm><primary>netstat(1)</primary></indexterm> ).</para>
	<screen>rootrhel610 ~]# netstat -r
Kernel IP routing table
Destination     Gateway   Genmask         Flags   MSS Window  irtt Iface
192.168.1.0     *         255.255.255.0   U         0 0          0 eth0
[rootrhel610 ~]# route
Kernel IP routing table
Destination     Gateway   Genmask         Flags Metric Ref    Use Iface
192.168.1.0     *         255.255.255.0   U     0      0        0 eth0
[rootrhel610 ~]#</screen>
	<para>It appears this computer does not have a <command>gateway</command><indexterm><primary>gateway</primary></indexterm> configured, so we use <command>route add default gw</command><indexterm><primary>route(1)</primary></indexterm> to add a <command>default gateway</command><indexterm><primary>default gateway</primary></indexterm> on the fly.</para>
	<screen>[rootrhel610 ~]# route add default gw 192.168.1.1
[rootrhel610 ~]# route
Kernel IP routing table
Destination     Gateway      Genmask        Flags Metric Ref  Use Iface
192.168.1.0     *            255.255.255.0  U     0      0      0 eth0
default         192.168.1.1  0.0.0.0        UG    0      0      0 eth0
[rootrhel610 ~]#</screen>
	<para>Unless you configure the gateway in one of the <command>/etc/</command> file from the start of this chapter, your computer will forget this <command>gateway</command> after a reboot.</para>
</section>
<section><title>ping</title>
	<para>If you can <command>ping</command><indexterm><primary>ping</primary></indexterm> to another host, then <command>tcp/ip</command> is configured.</para>
	<screen>[rootrhel610 ~]# ping 192.168.1.5
PING 192.168.1.5 (192.168.1.5) 56(84) bytes of data.
64 bytes from 192.168.1.5: icmp_seq=0 ttl=64 time=1004 ms
64 bytes from 192.168.1.5: icmp_seq=1 ttl=64 time=1.19 ms
64 bytes from 192.168.1.5: icmp_seq=2 ttl=64 time=0.494 ms
64 bytes from 192.168.1.5: icmp_seq=3 ttl=64 time=0.419 ms

--- 192.168.1.5 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3009ms
rtt min/avg/max/mdev = 0.419/251.574/1004.186/434.520 ms, pipe 2
[rootrhel610 ~]#</screen>
</section>
<?hard-pagebreak?>
<section><title>optional: ethtool</title>
	<para>To display or change network card settings, use <command>ethtool</command><indexterm><primary>ethtool(1)</primary></indexterm>. The results depend on the capabilities of your network card. The example shows a network that auto-negotiates it's bandwidth.</para>
	<screen>root@laika:~# ethtool eth0
Settings for eth0:
	Supported ports: [ TP ]
	Supported link modes:   10baseT/Half 10baseT/Full 
	                        100baseT/Half 100baseT/Full 
	                        1000baseT/Full 
	Supports auto-negotiation: Yes
	Advertised link modes:  10baseT/Half 10baseT/Full 
	                        100baseT/Half 100baseT/Full 
	                        1000baseT/Full 
	Advertised auto-negotiation: Yes
	Speed: 1000Mb/s
	Duplex: Full
	Port: Twisted Pair
	PHYAD: 0
	Transceiver: internal
	Auto-negotiation: on
	Supports Wake-on: pumbg
	Wake-on: g
	Current message level: 0x00000033 (51)
	Link detected: yes</screen>
	<para>This example shows how to use ethtool to switch the bandwidth from 1000Mbit to 100Mbit and back. Note that some time passes before the nic is back to 1000Mbit.</para>
	<screen>root@laika:~# ethtool eth0 | grep Speed
	Speed: 1000Mb/s
root@laika:~# ethtool -s eth0 speed 100
root@laika:~# ethtool eth0 | grep Speed
	Speed: 100Mb/s
root@laika:~# ethtool -s eth0 speed 1000
root@laika:~# ethtool eth0 | grep Speed
	Speed: 1000Mb/s</screen>
</section>
