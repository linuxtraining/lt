<para> A scripting or script language is a <bold>programming language</bold> for a special run-time environment/shells that automates the execution of commands one-by-one or line-by-line by a its user. Scripting languages are often interpreted, rather than compiled.
</para><para>Shells like <command>sh</command>, <command>ksh</command> and <command>bash</command> have support for programming constructs that can be 	saved as<command>scripts</command>.	These <command>scripts</command> can be converted into <command>shell</command> commands. Many UNIX/Linux commands are essentially	<command>scripts</command> that were placed in various <command>/bin</command><command>/usr/bin</command>, <command>/usr/sbin</command> or <command>/sbin</command>.	Some of these <command>scripts</command> can be inserted as <command>User profile scripts</command> that run when a user logins or can become to be	<command>init scripts</command>, which are run when a <command>daemon</command> is started or stopped.
Subsequently, This means that system administrators or SysOps also need solid knowledge of <command>scripting</command> to understand how their servers and	 their applications are started, updated, upgraded, patched, maintained, configured and removed, and also to understand 	 how a user environment is built.
</para><para>The goal of this chapter is to give you all the information in order to read, write and understand small, long  and complex scripts. <!--Not to become a writer of complex scripts.--></para>