<?hard-pagebreak?>
<section><title>arguments</title>
	<para>One of the primary features of a shell is to perform a <command>command line scan</command><indexterm><primary>command line scan</primary></indexterm>. When you enter a command at the shell's command prompt and press the enter key, then the shell will start scanning that line, cutting it up in <command>arguments</command>. While scanning the line, the shell may make many changes to the <command>arguments</command> you typed.</para>
	<para>This process is called <command>shell expansion</command><indexterm><primary>shell expansion</primary></indexterm>. When the shell has finished scanning and modifying that line, then it will be executed.</para>
</section>
<section><title>white space removal</title>
	<para>Parts that are separated by one or more consecutive <command>white spaces</command><indexterm><primary>white space(shell)</primary></indexterm> (or tabs) are considered separate <command>arguments</command>, any white space is removed. The first <command>argument</command><indexterm><primary>arguments(shell)</primary></indexterm> is the command to be executed, the other <command>arguments</command> are given to the command. The shell effectively cuts your command into one or more arguments.</para>
	<para>This explains why the following four different command lines are the same after <command>shell expansion</command><indexterm><primary>shell expansion</primary></indexterm>.</para>
	<screen>[paul@RHELv8u3 ~]$ echo Hello World
Hello World
[paul@RHELv8u3 ~]$ echo Hello   World
Hello World
[paul@RHELv8u3 ~]$ echo   Hello   World
Hello World
[paul@RHELv8u3 ~]$    echo      Hello      World
Hello World</screen>
	<para>The <command>echo</command><indexterm><primary>echo</primary></indexterm> command will display each argument it receives from the shell. The <command>echo</command> command will also add a new white space between the arguments it received.</para>
</section>
<?hard-pagebreak?>
<section><title>single quotes</title>
	<para>You can prevent the removal of white spaces by quoting the spaces. The contents of the quoted string are considered as one argument. In the screenshot below the <command>echo</command> receives only one <command>argument</command>.</para>
	<screen>[paul@RHEL8b ~]$ echo 'A line with      single    quotes'
A line with      single    quotes
[paul@RHEL8b ~]$</screen>
</section>
<section><title>double quotes</title>
	<para>You can also prevent the removal of white spaces by double quoting <indexterm><primary>" (double quotes)</primary></indexterm> the spaces. Same as above, <command>echo</command> only receives one <command>argument</command>.</para>
	<screen>[paul@RHEL8b ~]$ echo "A line with      double    quotes"
A line with      double    quotes
[paul@RHEL8b ~]$</screen>
	<para>Later in this book, when discussing <command>variables</command> we will see important differences between single and double quotes.</para>
</section>
<section><title>echo and quotes</title>
	<para>Quoted lines can include special escaped characters recognised by the <command>echo</command> command (when using <command>echo -e</command><indexterm><primary>echo(1)</primary></indexterm>). The screenshot below shows how to use <command>\n</command> for a newline and <command>\t</command> for a tab (usually eight white spaces).</para>
	<screen>[paul@RHEL8b ~]$ echo -e "A line with \na newline"
A line with 
a newline
[paul@RHEL8b ~]$ echo -e 'A line with \na newline'
A line with 
a newline
[paul@RHEL8b ~]$ echo -e "A line with \ta tab"
A line with     a tab
[paul@RHEL8b ~]$ echo -e 'A line with \ta tab'
A line with     a tab
[paul@RHEL8b ~]$</screen>
	<para>The echo command can generate more than white spaces, tabs and newlines. Look in the man page for a list of options.</para>
</section>
<?hard-pagebreak?>
<section><title>commands</title>
	<section><title>external or builtin commands ?</title>
		<para>Not all commands are external to the shell, some are <command>builtin</command>. <command>External commands</command> are programs that have their own binary and reside somewhere in the file system. Many external commands are located in <command>/bin</command><indexterm><primary>/bin</primary></indexterm> or <command>/sbin</command><indexterm><primary>/sbin</primary></indexterm>. <command>Builtin commands</command> are an integral part of the shell program itself.</para>
	</section>
	<section><title>type</title>
		<para>To find out whether a command given to the shell will be executed as an <command>external command</command> or as a <command>builtin command</command>, use the <command>type</command><indexterm><primary>type(shell)</primary></indexterm> command.</para>
		<screen>paul@laika:~$ type cd
cd is a shell builtin
paul@laika:~$ type cat
cat is /bin/cat</screen>
		<para>As you can see, the <command>cd</command> command is <command>builtin</command> and the <command>cat</command> command is <command>external</command>.</para>
		<para>You can also use this command to show you whether the command is <command>aliased</command> or not.</para>
		<screen>paul@laika:~$ type ls
ls is aliased to `ls --color=auto'</screen>
	</section>
	<section><title>running external commands</title>
		<para>Some commands have both builtin and external versions. When one of these commands is executed, the builtin version takes priority. To run the external version, you must enter the full path to the command.</para>
		<screen>paul@laika:~$ type -a echo
echo is a shell builtin
echo is /bin/echo
paul@laika:~$ /bin/echo Running the external echo command... 
Running the external echo command...</screen>
	</section>
	<section><title>which</title>
		<para>The <command>which</command><indexterm><primary>which(1)</primary></indexterm> command will search for binaries in the <command>$PATH</command><indexterm><primary>$PATH</primary></indexterm> environment variable (variables will be explained later). In the screenshot below, it is determined that <command>cd</command> is <command>builtin</command>, and <command>ls, cp, rm, mv, mkdir, pwd,</command> and <command>which</command> are external commands.</para> 
		<screen>[root@RHEL8b ~]# which cp ls cd mkdir pwd 
/bin/cp
/bin/ls
/usr/bin/which: no cd in (/usr/kerberos/sbin:/usr/kerberos/bin:...
/bin/mkdir
/bin/pwd</screen>
	</section>
</section>
<section><title>aliases</title>
	<section><title>create an alias</title>
		<para>The shell allows you to create <command>aliases</command><indexterm><primary>alias(bash)</primary></indexterm>. Aliases are often used to create an easier to remember name for an existing command or to easily supply parameters.</para>
		<screen>[paul@RHELv8u3 ~]$ cat count.txt 
one
two
three
[paul@RHELv8u3 ~]$ alias dog=tac
[paul@RHELv8u3 ~]$ dog count.txt 
three
two
one</screen>
	</section>
	<section><title>abbreviate commands</title>
		<para>An <command>alias</command><indexterm><primary>alias(shell)</primary></indexterm> can also be useful to abbreviate an existing command.</para>
		<screen>paul@laika:~$ alias ll='ls -lh --color=auto'
paul@laika:~$ alias c='clear'
paul@laika:~$</screen>
	</section>
	<section><title>default options</title>
		<para>Aliases can be used to supply commands with default options. The example below shows how to set the <command>-i</command> option default when typing <command>rm</command><indexterm><primary>/bin/rm</primary></indexterm>.</para>
		<screen>[paul@RHELv8u3 ~]$ rm -i winter.txt 
rm: remove regular file `winter.txt'? no
[paul@RHELv8u3 ~]$ rm winter.txt 
[paul@RHELv8u3 ~]$ ls winter.txt
ls: winter.txt: No such file or directory
[paul@RHELv8u3 ~]$ touch winter.txt
[paul@RHELv8u3 ~]$ alias rm='rm -i'
[paul@RHELv8u3 ~]$ rm winter.txt 
rm: remove regular empty file `winter.txt'? no
[paul@RHELv8u3 ~]$</screen>
		<para>Some distributions enable default aliases to protect users from accidentally erasing files ('rm -i', 'mv -i', 'cp -i')</para>
	</section>
	<section><title>viewing aliases</title>
		<para>You can provide one or more aliases as arguments to the <command>alias</command> command to get their definitions. Providing no arguments gives a complete list of current aliases.</para>
		<screen>paul@laika:~$ alias c ll
alias c='clear'
alias ll='ls -lh --color=auto'</screen>
	</section>
<?hard-pagebreak?>
	<section><title>unalias</title>
		<para>You can undo an alias with the <command>unalias</command><indexterm><primary>unalias(bash)</primary></indexterm> command.</para>
		<screen>[paul@RHEL8b ~]$ which rm
/bin/rm
[paul@RHEL8b ~]$ alias rm='rm -i'
[paul@RHEL8b ~]$ which rm
alias rm='rm -i'
        /bin/rm
[paul@RHEL8b ~]$ unalias rm
[paul@RHEL8b ~]$ which rm
/bin/rm
[paul@RHEL8b ~]$</screen>
	</section>
</section>
<section><title>displaying shell expansion</title>
	<para>You can display shell expansion with <command>set -x</command><indexterm><primary>set -x</primary></indexterm>, and stop displaying it with <command>set +x</command><indexterm><primary>set +x</primary></indexterm>. You might want to use this further on in this course, or when in doubt about exactly what the shell is doing with your command.</para>
		<screen>[paul@RHELv8u3 ~]$ set -x
++ echo -ne '\033]0;paul@RHELv8u3:~\007'
[paul@RHELv8u3 ~]$ echo $USER
+ echo paul
paul
++ echo -ne '\033]0;paul@RHELv8u3:~\007'
[paul@RHELv8u3 ~]$ echo \$USER
+ echo '$USER'
$USER
++ echo -ne '\033]0;paul@RHELv8u3:~\007'
[paul@RHELv8u3 ~]$ set +x
+ set +x
[paul@RHELv8u3 ~]$ echo $USER
paul</screen>
</section>
