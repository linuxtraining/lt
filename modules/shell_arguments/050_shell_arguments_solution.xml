<?hard-pagebreak?>
<section><title>solution: commands and arguments</title>
	<para>1. How many <command>arguments</command> are in this line (not counting the command itself).</para>
	<screen>touch '/etc/cron/cron.allow' 'file 42.txt' "file 33.txt"</screen>
	<screen>answer: three</screen>
	<para>2. Is <command>tac</command> a shell builtin command ?</para>
	<screen>type tac</screen>
	<para>3. Is there an existing alias for <command>rm</command> ?</para>
	<screen>alias rm</screen>
	<para>4. Read the man page of <command>rm</command>, make sure you understand the <command>-i</command> option of rm. Create and remove a file to test the <command>-i</command> option.</para>
	<screen>man rm</screen>
	<screen>touch testfile</screen>
	<screen>rm -i testfile</screen>
	<para>5. Execute: <command>alias rm='rm -i'</command> . Test your alias with a test file. Does this work as expected ?</para>
	<screen>touch testfile</screen>
	<screen>rm testfile (should ask for confirmation)</screen>
	<para>6. List all current aliases.</para>
	<screen>alias</screen>
	<para>7a. Create an alias called 'city' that echoes your hometown.</para>
	<screen>alias city='echo Antwerp'</screen>
	<para>7b. Use your alias to test that it works.</para>
	<screen>city (it should display Antwerp)</screen>
	<para>8. Execute <command>set -x</command> to display shell expansion for every command.</para>
	<screen>set -x</screen>
	<para>9. Test the functionality of <command>set -x</command> by executing your <command>city</command> and <command>rm</command> aliases.</para>
	<screen>shell should display the resolved aliases and then execute the command:
paul@deb106:~$ set -x
paul@deb106:~$ city
+ echo antwerp
antwerp</screen>
	<para>10 Execute <command>set +x</command> to stop displaying shell expansion.</para>
	<screen>set +x</screen>
	<para>11. Remove your city alias.</para>
	<screen>unalias city</screen>
	<para>12. What is the location of the <command>cat</command> and the <command>passwd</command> commands ?</para>
	<screen>which cat (probably /bin/cat)</screen>
	<screen>which passwd (probably /usr/bin/passwd)</screen>
	<para>13. Explain the difference between the following commands:</para>	
	<screen>echo</screen>
	<screen>/bin/echo</screen>
	<para>The <command>echo</command> command will be interpreted by the shell as the <command>built-in echo</command> command. The <command>/bin/echo</command> command will make the shell execute the <command>echo binary</command> located in the <command>/bin</command> directory.</para>
	<para>14. Explain the difference between the following commands:</para>	
	<screen>echo Hello</screen>
	<screen>echo -n Hello</screen>
	<para>The -n option of the <command>echo</command> command will prevent echo from echoing a trailing newline. <command>echo Hello</command> will echo six characters in total, <command>echo -n hello</command> only echoes five characters.</para>
	<para>(The -n option might not work in the Korn shell.)</para>
	<para>15. Display <command>A B  C</command> with two spaces between B and C.</para>
	<screen>echo "A B  C"</screen>
	<para>16. Complete the following command (do not use spaces) to display exactly the following output:</para>
	<screen>4+4     =8
10+14   =24</screen>
	<para>The solution is to use tabs with \t.</para>
	<screen>echo -e "4+4\t=8" ; echo -e "10+14\t=24"</screen>
	<para>17. Use <command>echo</command> to display the following exactly:</para>
	<screen>??\\
echo '??\\'
echo -e '??\\\\'
echo "??\\\\"
echo -e "??\\\\\\"
echo ??\\\\</screen>
	<para>Find two solutions with single quotes, two with double quotes and one without quotes (and say thank you to Ren&#233; and Darioush from Google for this extra).</para>
	<para>18. Use one <command>echo</command> command to display three words on three lines.</para>
	<screen>echo -e "one \ntwo \nthree"</screen>
</section>
