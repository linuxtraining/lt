<?hard-pagebreak?>
<section><title>nfs protocol versions</title>
	<para>The older <command>nfs</command><indexterm><primary>nfs</primary></indexterm> versions 2 and 3 are stateless (<command>udp</command><indexterm><primary>udp</primary></indexterm>) by default (but they can use <command>tcp</command><indexterm><primary>tcp</primary></indexterm>). The more recent <command>nfs version 4</command> brings a stateful protocol with better performance and stronger security.</para>
	<para>NFS version 4 was defined in <command>rfc 3010</command><indexterm><primary>rfc 3010</primary></indexterm> in 2000 and <command>rfc 3530</command><indexterm><primary>rfc 3530</primary></indexterm> in 2003 and requires tcp (port 2049). It also supports <command>Kerberos</command><indexterm><primary>Kerberos</primary></indexterm> user authentication as an option when mounting a share. NFS versions 2 and 3 authenticate only the host.</para>
</section>			
<section><title>rpcinfo</title>
	<para>Clients connect to the server using <command>rpc</command><indexterm><primary>rpc</primary></indexterm> (on Linux this can be managed by the <command>portmap</command><indexterm><primary>portmap</primary></indexterm> daemon). Look at <command>rpcinfo</command><indexterm><primary>rpcinfo(1)</primary></indexterm> to verify that <command>nfs</command> and its related services are running.</para>
		<screen>root@RHELv8u2:~# /etc/init.d/portmap status
portmap (pid 1920) is running...
root@RHELv8u2:~# rpcinfo -p
program vers proto   port
100000    2   tcp    111  portmapper
100000    2   udp    111  portmapper
100024    1   udp  32768  status
100024    1   tcp  32769  status
root@RHELv8u2:~# service nfs start
Starting NFS services:                                     [  OK  ]
Starting NFS quotas:                                       [  OK  ]
Starting NFS daemon:                                       [  OK  ]
Starting NFS mountd:                                       [  OK  ]</screen>
		<para>The same <command>rpcinfo</command> command when <command>nfs</command> is started.</para>
		<screen>root@RHELv8u2:~# rpcinfo -p
program vers proto   port
100000    2   tcp    111  portmapper
100000    2   udp    111  portmapper
100024    1   udp  32768  status
100024    1   tcp  32769  status
100011    1   udp    985  rquotad
100011    2   udp    985  rquotad
100011    1   tcp    988  rquotad
100011    2   tcp    988  rquotad
100003    2   udp   2049  nfs
100003    3   udp   2049  nfs
100003    4   udp   2049  nfs
100003    2   tcp   2049  nfs
100003    3   tcp   2049  nfs
100003    4   tcp   2049  nfs
100021    1   udp  32770  nlockmgr
100021    3   udp  32770  nlockmgr
100021    4   udp  32770  nlockmgr
100021    1   tcp  32789  nlockmgr
100021    3   tcp  32789  nlockmgr
100021    4   tcp  32789  nlockmgr
100005    1   udp   1004  mountd
100005    1   tcp   1007  mountd
100005    2   udp   1004  mountd
100005    2   tcp   1007  mountd
100005    3   udp   1004  mountd
100005    3   tcp   1007  mountd</screen>
</section>			
<section><title>server configuration</title>
	<para><command>nfs</command> is configured in <command>/etc/exports</command><indexterm><primary>/etc/exports</primary></indexterm>. You might want some way (<command>ldap</command><indexterm><primary>ldap</primary></indexterm>?) to synchronize userid's across computers when using <command>nfs</command> a lot.</para>
	<para>The <command>rootsquash</command><indexterm><primary>rootsquash</primary></indexterm> option will change UID 0 to the UID of a <command>nobody</command> (or similar) user account. The <command>sync</command> option will write writes to disk before completing the client request.</para>
</section>			
<section><title>/etc/exports</title>
	<para>Here is a sample <command>/etc/exports</command> to explain the syntax:</para>
	<screen>paul@laika:~$ cat /etc/exports 
# Everyone can read this share
/mnt/data/iso  *(ro)
				
# Only the computers named pasha and barry can readwrite this one
/var/www pasha(rw) barry(rw)
				
# same, but without root squashing for barry
/var/ftp pasha(rw) barry(rw,no_root_squash)
				
# everyone from the netsec.local domain gets access
/var/backup       *.netsec.local(rw)
				
# ro for one network, rw for the other
/var/upload   192.168.1.0/24(ro) 192.168.5.0/24(rw)</screen>
	<para>More recent incarnations of <command>nfs</command> require the <command>subtree_check</command><indexterm><primary>subtree_check(nfs)</primary></indexterm> option to be explicitly set (or unset with <command>no_subtree_check)</command><indexterm><primary>no_subtree_check(nfs)</primary></indexterm>. The <command>/etc/exports</command> file then looks like this:</para>
	<screen>root@debian6 ~# cat /etc/exports
# Everyone can read this share
/srv/iso  *(ro,no_subtree_check)

# Only the computers named pasha and barry can readwrite this one 
/var/www pasha(rw,no_subtree_check) barry(rw,no_subtree_check)

# same, but without root squashing for barry
/var/ftp pasha(rw,no_subtree_check) barry(rw,no_root_squash,no_subtree_check)</screen>
</section>	
<section><title>exportfs</title>
	<para>You don't need to restart the nfs server to start exporting your newly created exports. You can use the <command>exportfs -va</command><indexterm><primary>exportfs(1)</primary></indexterm> command to do this. It will write the exported directories to <command>/var/lib/nfs/etab</command><indexterm><primary>/var/lib/nfs/etab</primary></indexterm>, where they are immediately applied. </para>
	<screen>root@debian6 ~# exportfs -va
exporting pasha:/var/ftp
exporting barry:/var/ftp
exporting pasha:/var/www
exporting barry:/var/www
exporting *:/srv/iso</screen>
</section>	
<?hard-pagebreak?>
	<section><title>client configuration</title>
		<para>We have seen the <command>mount</command><indexterm><primary>mount(1)</primary></indexterm> command and the <command>/etc/fstab</command><indexterm><primary>/etc/fstab</primary></indexterm> file before.</para>
		<screen>root@RHELv8u2:~# mount -t nfs barry:/mnt/data/iso /home/project55/
root@RHELv8u2:~# cat /etc/fstab | grep nfs
barry:/mnt/data/iso   /home/iso               nfs     defaults    0 0
root@RHELv8u2:~#</screen>
		<para>Here is another simple example. Suppose the project55 people tell you they only need a couple of CD-ROM images, and you already have them available on an <command>nfs</command> server. You could issue the following command to mount this storage on their <command>/home/project55</command> mount point.</para>
		<screen>
root@RHELv8u2:~# mount -t nfs 192.168.1.40:/mnt/data/iso /home/project55/
root@RHELv8u2:~# ls -lh /home/project55/
total 3.6G
drwxr-xr-x  2 1000 1000 4.0K Jan 16 17:55 RHELv8u1
drwxr-xr-x  2 1000 1000 4.0K Jan 16 14:14 RHELv8u2
drwxr-xr-x  2 1000 1000 4.0K Jan 16 14:54 RHELv8u3
drwxr-xr-x  2 1000 1000 4.0K Jan 16 11:09 RHELv8u4
-rw-r--r--  1 root root 1.6G Oct 13 15:22 sled10-vmwarews5-vm.zip
root@RHELv8u2:~# 
		</screen>
	</section>
