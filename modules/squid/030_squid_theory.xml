<?hard-pagebreak?>
<section><title>installing squid</title>
<para>This screenshot shows how to install squid on Debian with <command>aptitude</command>. Use <command>yum</command> if you are on Red Hat/CentOS.</para>
<screen>root@debian10:~# <command>aptitude install squid</command>
The following NEW packages will be installed:
  squid squid-common{a} squid-langpack{a}
0 packages upgraded, 3 newly installed, 0 to remove and 0 not upgraded.
Need to get 1,513 kB of archives. After unpacking 4,540 kB will be used.
Do you want to continue? [Y/n/?]
...output truncated...
Setting up squid-langpack (20120616-1) ...
Setting up squid-common (2.7.STABLE9-4.1) ...
Setting up squid (2.7.STABLE9-4.1) ...
Creating squid spool directory structure
2014/08/01 15:19:31| Creating Swap Directories
Restarting Squid HTTP proxy: squid.</screen>
	<para><command>squid</command>'s main configuration file is <command>/etc/squid/squid.conf</command><indexterm><primary>/etc/squid/squid.conf</primary></indexterm>. The file explains every parameter in great detail.</para>
	<screen>root@debian10:~# <command>wc -l /etc/squid/squid.conf</command>
4948 /etc/squid/squid.conf</screen>
</section>
<section><title>port 3128</title>
<para>By default the <command>squid proxy server</command> will lsiten to <command>port 3128</command>.</para>
<screen>root@debian10:~# <command>grep ^http_port /etc/squid/squid.conf</command>
http_port 3128
root@debian10:~#</screen>
</section>
<section><title>starting and stopping</title>
<para>You can manage <command>squid</command> with the standard <command>service</command> command as shown in this screenshot.</para>
<screen>root@debian10:~# <command>service squid start</command>
Starting Squid HTTP proxy: squid.
root@debian10:~# <command>service squid restart</command>
Restarting Squid HTTP proxy: squid.
root@debian10:~# <command>service squid status</command>
squid is running.
root@debian10:~# <command>service squid stop</command>
Stopping Squid HTTP proxy: squid.
root@debian10:~#</screen>
</section>
<?hard-pagebreak?>
<section><title>client proxy settings</title>
<para>To enable a proxy server in <command>Firefox</command> or <command>Iceweasel</command> go to <command>Edit Preferences</command> and configure as shown in this screenshot (replace 192.168.1.60 with the ip address of your proxy server).</para>
	<para><mediaobject><imageobject><imagedata fileref="images/proxy_firefoxsettings.png" format="PNG" align="center"></imagedata></imageobject></mediaobject></para>
	<para>Test that your internet works with the proxy enabled. Also test that after a <command>service squid stop</command> command on your proxy server that you get a message similar to this schreenshot.</para>
	<para><mediaobject><imageobject><imagedata fileref="images/firefox_noproxy.png" format="PNG" align="center"></imagedata></imageobject></mediaobject></para>
<?hard-pagebreak?>
<para>To enable a proxy server with Google Chrome (or Debian Chromium) start the program from the command line like this:</para>
<screen>paul@debian10:~$ chromium --proxy-server='192.168.1.60:3128'</screen>
<para>Disabling the proxy with <command>service squid stop</command> should result in an error message similar to this screenshot.</para>
	<para><mediaobject><imageobject><imagedata fileref="images/chromium_noproxy.png" format="PNG" align="center"></imagedata></imageobject></mediaobject></para>
</section>
<?hard-pagebreak?>
<section><title>upside down images</title>
<para>A proxy server sits inbetween your browser and the internet. So besides caching of internet data (the original function of a proxy server) and besides firewall like restrictions based on www content, a proxy server is in the perfect position to alter the webpages that you visit.</para>
<para>You could for instance change the advertising on a webpage (or remove certain advertisers), or like we do in this example; change all images so they are upside down.</para>
<para>The server needs command line tools to manipulate images and a perl script that uses these tools (and <command>wget</command> to download the images locally and serve them with <command>apache2</command>). In this example we use <command>imagemagick</command> (which provides tools like <command>convert</command> and <command>mogrify</command>).</para>
<screen>root@debian10:~# <command>aptitude install imagemagick wget perl apache2</command>
...output truncated...
root@debian10:~# <command>dpkg -S $(readlink -f $(which mogrify))</command>
imagemagick: /usr/bin/mogrify.im6
root@debian10:~#</screen>
<para>The perl script that is shown in the screenshot below can be found on several websites, yet I have not found the original author. It is however a very simple script that uses <command>wget</command> and <command>mogrify</command> to download images (.jpg .gif and .png), flip them and store them in <command>/var/www/images</command>.</para>
<screen>root@debian10:~# cat /usr/local/bin/flip.pl
#!/usr/bin/perl
$|=1;
$count = 0;
$pid = $$;
while (&#060;&#062;) {
 chomp $_;
 if ($_ =~ /(.*\.jpg)/i) {
  $url = $1;
  system("/usr/bin/wget", "-q", "-O","/var/www/images/$pid-$count.jpg", "$url");
  system("/usr/bin/mogrify", "-flip","/var/www/images/$pid-$count.jpg");
  print "http://127.0.0.1/images/$pid-$count.jpg\n";
 }
 elsif ($_ =~ /(.*\.gif)/i) {
  $url = $1;
  system("/usr/bin/wget", "-q", "-O","/var/www/images/$pid-$count.gif", "$url");
  system("/usr/bin/mogrify", "-flip","/var/www/images/$pid-$count.gif");
  print "http://127.0.0.1/images/$pid-$count.gif\n";
 }
 elsif ($_ =~ /(.*\.png)/i) {
  $url = $1;
  system("/usr/bin/wget", "-q", "-O","/var/www/images/$pid-$count.png", "$url");
  system("/usr/bin/mogrify", "-flip","/var/www/images/$pid-$count.png");
  print "http://127.0.0.1/images/$pid-$count.png\n";
 }
 else {
         print "$_\n";;
 }
 $count++;
}</screen>
<para>Change (or enable) also the following line in <command>/etc/squid/suiqd.conf</command>.</para>
<screen>http_access allow localnet
http_port 3128 transparent
url_rwwrite_program /usr/local/bin/flip.pl</screen>
<para>The directory this script uses is <command>/var/www/images</command> and should be accessible by both the <command>squid server</command> (which uses the user named <command>proxy</command> and by the <command>apache2</command> webserver (which uses the user <command>www-data</command>. The screenshot below shows how to create this directory, set the permissions and make the users a member of the other groups.</para>
<screen>root@debian10:~# mkdir /var/www/images
root@debian10:~# chown www-data:www-data /var/www/images
root@debian10:~# chmod 755 /var/www/images
root@debian10:~# usermod -aG www-data proxy
root@debian10:~# usermod -aG proxy www-data</screen>
<para>Test that it works after restarting <command>squid</command> and <command>apache2</command>.</para>
	<para><mediaobject><imageobject><imagedata fileref="images/proxy_upsidedown_xkcd.png" format="PNG" align="center"></imagedata></imageobject></mediaobject></para>
</section>
<?hard-pagebreak?>
<section><title>/var/log/squid</title>
	<para>The standard log file location for squid is <command>/var/log/squid</command><indexterm><primary>/var/log/squid</primary></indexterm>.</para>
	<screen>[root@RHEL4 ~]# grep "/var/log" /etc/squid/squid.conf
# cache_access_log /var/log/squid/access.log
# cache_log /var/log/squid/cache.log
# cache_store_log /var/log/squid/store.log</screen>
</section>
<section><title>access control</title>
	<para>The default squid setup only allows localhost access. To enable access for a private network range, look for the "INSERT YOUR OWN RULE(S) HERE..." sentence in squid.conf and add two lines similar to the screenshot below.</para>
	<screen># INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS

acl company_network src 192.168.1.0/24
http_access allow company_network</screen>
</section>
<section><title>testing squid</title>
	<para>First, make sure that the server running squid has access to the internet.</para>
	<screen>[root@RHEL4 ~]# wget -q http://linux-training.be/index.html
[root@RHEL4 ~]# ls -l index.html 
-rw-r--r--  1 root root 2269 Sep 18 13:18 index.html
[root@RHEL4 ~]#</screen>
	<para>Then configure a browser on a client to use the proxy server, or you could set the HTTP_PROXY (sometimes http_proxy) variable to point command line programs to the proxy.</para>
	<screen>[root@fedora ~]# export HTTP_PROXY=http://192.168.1.39:8080
[root@ubuntu ~]# export http_proxy=http://192.168.1.39:8080</screen>
	<para>Testing a client machine can then be done with wget (wget -q is used to simplify the screenshot).</para>
	<screen>[root@RHEL5 ~]# > /etc/resolv.conf
[root@RHEL5 ~]# wget -q http://www.linux-training.be/index.html
[root@RHEL5 ~]# ls -l index.html 
-rw-r--r-- 1 root root 2269 Sep 18  2008 index.html
[root@RHEL5 ~]#</screen>
</section>
<section><title>name resolution</title>
	<para>You need name resolution working on the <command>squid</command> server, but you don't need name resolution on the clients.</para>
	<screen>[paul@RHEL5 ~]$ wget http://grep.be
--14:35:44--  http://grep.be
Resolving grep.be... failed: Temporary failure in name resolution.
[paul@RHEL5 ~]$ export http_proxy=http://192.168.1.39:8080
[paul@RHEL5 ~]$ wget http://grep.be
--14:35:49--  http://grep.be/
Connecting to 192.168.1.39:8080... connected.
Proxy request sent, awaiting response... 200 OK
Length: 5390 (5.3K) [text/html]
Saving to: `index.html.1'

100%[================================>] 5,390       --.-K/s   in 0.1s

14:38:29 (54.8 KB/s) - `index.html' saved [5390/5390]

[paul@RHEL5 ~]$</screen>
</section>
