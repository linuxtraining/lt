<?hard-pagebreak?>
<section><title>; semicolon</title>
	<para>You can put two or more commands on the same line separated by a semicolon <command>;</command><indexterm><primary>; (shell)</primary></indexterm> . The shell will scan the line until it reaches the semicolon. All the arguments before this semicolon will be considered a separate command from all the arguments after the semicolon. Both series will be executed sequentially with the shell waiting for each command to finish before starting the next one.</para>
	<screen>[paul@RHELv8u3 ~]$ echo Hello
Hello
[paul@RHELv8u3 ~]$ echo World
World
[paul@RHELv8u3 ~]$ echo Hello ; echo World
Hello
World
[paul@RHELv8u3 ~]$</screen>
</section>
<section><title>&#038; ampersand</title>
	<para>When a line ends with an ampersand <command>&#038;</command><indexterm><primary>&#038;</primary></indexterm>, the shell will not wait for the command to finish. You will get your shell prompt back, and the command is executed in background. You will get a message when this command has finished executing in background.</para>
	<screen>[paul@RHELv8u3 ~]$ sleep 20 &#038;
[1] 7925
[paul@RHELv8u3 ~]$ 
...wait 20 seconds...
[paul@RHELv8u3 ~]$ 
[1]+  Done                     sleep 20</screen>
	<para>The technical explanation of what happens in this case is explained in the chapter about <command>processes</command>.</para>
</section>
<section><title>$? dollar question mark</title>
	<para>The exit code of the previous command is stored in the shell variable <command>$?</command>. Actually <command>$?</command><indexterm><primary>$? (shell variables)</primary></indexterm> is a shell parameter and not a variable, since you cannot assign a value to <command>$?</command>.</para>
	<screen>paul@debian10:~/test$ touch file1
paul@debian10:~/test$ echo $?
0
paul@debian10:~/test$ rm file1
paul@debian10:~/test$ echo $?
0
paul@debian10:~/test$ rm file1
rm: cannot remove `file1': No such file or directory
paul@debian10:~/test$ echo $?
1
paul@debian10:~/test$</screen>
</section>
<?hard-pagebreak?>
<section><title>&#038;&#038; double ampersand</title>
	<para>The shell will interpret <command>&#038;&#038;</command><indexterm><primary>&#038;&#038;</primary></indexterm> as a <command>logical AND</command>. When using <command>&#038;&#038;</command> the second command is executed only if the first one succeeds (returns a zero exit status). </para>
	<screen>paul@barry:~$ echo first &#038;&#038; echo second
first
second
paul@barry:~$ zecho first &#038;&#038; echo second
-bash: zecho: command not found</screen>
	<para>Another example of the same <command>logical AND</command><indexterm><primary>logical AND</primary></indexterm> principle. This example starts with a working <command>cd</command> followed by <command>ls</command>, then a non-working <command>cd</command> which is <command>not</command> followed by <command>ls</command>.</para>
	<screen>[paul@RHELv8u3 ~]$ cd gen &#038;&#038; ls
file1  file3  File55  fileab  FileAB   fileabc
file2  File4  FileA   Fileab  fileab2
[paul@RHELv8u3 gen]$ cd gen &#038;&#038; ls
-bash: cd: gen: No such file or directory</screen>
</section>
<section><title>|| double vertical bar</title>
	<para>The <command>||</command><indexterm><primary>||</primary></indexterm> represents a <command>logical OR</command>. The second command is executed only when the first command fails (returns a non-zero exit status).</para>
	<screen>paul@barry:~$ echo first || echo second ; echo third
first
third
paul@barry:~$ zecho first || echo second ; echo third
-bash: zecho: command not found
second
third
paul@barry:~$</screen>
	<para>Another example of the same <command>logical OR</command><indexterm><primary>logical OR</primary></indexterm> principle.</para>
	<screen>[paul@RHELv8u3 ~]$ cd gen || ls
[paul@RHELv8u3 gen]$ cd gen || ls
-bash: cd: gen: No such file or directory
file1  file3  File55  fileab  FileAB   fileabc
file2  File4  FileA   Fileab  fileab2</screen>
</section>
<section><title>combining &#038;&#038; and ||</title>
	<para>You can use this logical AND and logical OR to write an <command>if-then-else</command> structure on the command line. This example uses <command>echo</command> to display whether the <command>rm</command> command was successful.</para>
	<screen>paul@laika:~/test$ rm file1 &#038;&#038; echo It worked! || echo It failed!
It worked!
paul@laika:~/test$ rm file1 &#038;&#038; echo It worked! || echo It failed!
rm: cannot remove `file1': No such file or directory
It failed!
paul@laika:~/test$</screen>
</section>
<?hard-pagebreak?>
<section><title># pound sign</title>
	<para>Everything written after a <command>pound sign</command><indexterm><primary># (pound sign)</primary></indexterm> (#) is ignored by the shell. This is useful to write a <command>shell comment</command><indexterm><primary>shell comment</primary></indexterm>, but has no influence on the command execution or shell expansion.</para>
	<screen>paul@debian4:~$ mkdir test    # we create a directory
paul@debian4:~$ cd test       #### we enter the directory
paul@debian4:~/test$ ls       # is it empty ?
paul@debian4:~/test$</screen>
</section>
<section><title>\ escaping special characters</title>
	<para>The backslash <command>\</command><indexterm><primary>\ (backslash)</primary></indexterm> character enables the use of control characters, but without the shell interpreting it, this is called <command>escaping</command><indexterm><primary>shell escaping</primary></indexterm> characters.</para>
	<screen>[paul@RHELv8u3 ~]$ echo hello \; world
hello ; world
[paul@RHELv8u3 ~]$ echo hello\ \ \ world
hello   world
[paul@RHELv8u3 ~]$ echo escaping \\\ \#\ \&#038;\ \"\ \'
escaping \ # &#038; " '
[paul@RHELv8u3 ~]$ echo escaping \\\?\*\"\'
escaping \?*"'</screen>
	<section><title>end of line backslash</title>
		<para>Lines ending in a backslash are continued on the next line. The shell does not interpret the newline character and will wait on shell expansion and execution of the command line until a newline without backslash is encountered.</para>
		<screen>[paul@RHEL8b ~]$ echo This command line \
> is split in three \
> parts
This command line is split in three parts
[paul@RHEL8b ~]$</screen>
	</section>
</section>
