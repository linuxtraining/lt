<?hard-pagebreak?>
	<section><title>mounting local file systems</title>
		<section><title>mkdir</title>
			<para>This example shows how to create a new <command>mount point</command> with <command>mkdir</command><indexterm><primary>mkdir</primary></indexterm>.</para>
			<screen>root@RHELv8u2:~# mkdir /home/project42</screen>
		</section>
		<section><title>mount</title>
			<para>When the <command>mount point</command> is created, and a <command>file system</command> is present on the partition, then <command>mount</command> can <command>mount</command> the <command>file system</command> on the <command>mount point directory</command>.</para>
			<screen>root@RHELv8u2:~# mount -t ext2 /dev/sdb1 /home/project42/</screen>
 			<para>Once mounted, the new file system is accessible to users.</para>
		</section>
		<section><title>/etc/filesystems</title>
			<para>Actually the explicit <command>-t ext2</command> option to set the file system is not always necessary. The <command>mount</command> command is able to automatically detect a lot of file systems.</para>
			<para>When mounting a file system without specifying explicitly the file system, then <command>mount</command><indexterm><primary>mount</primary></indexterm> will first probe <command>/etc/filesystems</command><indexterm><primary>/etc/filesystems</primary></indexterm>. Mount will skip lines with the <command>nodev</command><indexterm><primary>nodev</primary></indexterm> directive.</para>
			<screen>paul@RHELv8u4:~$ cat /etc/filesystems 
ext3
ext2
nodev proc
nodev devpts
iso9660
vfat
hfs</screen>
		</section>
		<section><title>/proc/filesystems</title>
			<para>When <command>/etc/filesystems</command> does not exist, or ends with a single * on the last line, then <command>mount</command> will read <command>/proc/filesystems</command><indexterm><primary>/proc/filesystems</primary></indexterm>.</para>
			<screen>[root@RHEL52 ~]# cat /proc/filesystems | grep -v ^nodev
	ext2
	iso9660
	ext3</screen>
		</section>
        	<section><title>umount</title>
			<para>You can <command>unmount</command> a mounted file system using the <command>umount</command> command.</para>
        	        <screen>root@pasha:~# umount /home/reet</screen>
		</section>
	</section>
<?hard-pagebreak?>
	<section><title>displaying mounted file systems</title>
		<para>To display all mounted file systems, issue the <command>mount</command> command. Or look at the files <command>/proc/mounts</command><indexterm><primary>/proc/mounts</primary></indexterm> and <command>/etc/mtab</command><indexterm><primary>/etc/mtab</primary></indexterm>.</para>
		<section><title>mount</title>
			<para>The simplest and most common way to view all mounts is by issuing the <command>mount</command><indexterm><primary>mount(1)</primary></indexterm> command without any arguments.</para>
			<screen>root@RHELv8u2:~# mount | grep /dev/sdb
/dev/sdb1 on /home/project42 type ext2 (rw)</screen>
		</section>
		<section><title>/proc/mounts</title>
			<para>The kernel provides the info in <command>/proc/mounts</command> in file form, but <command>/proc/mounts</command> does not exist as a file on any hard disk. Looking at <command>/proc/mounts</command> is looking at information that comes directly from the kernel.</para>
			<screen>root@RHELv8u2:~# cat /proc/mounts | grep /dev/sdb
/dev/sdb1 /home/project42 ext2 rw 0 0</screen>
		</section>
		<section><title>/etc/mtab</title>
			<para>The <command>/etc/mtab</command> file is not updated by the kernel, but is maintained by the <command>mount</command> command. Do not edit <command>/etc/mtab</command> manually.</para>
			<screen>root@RHELv8u2:~# cat /etc/mtab | grep /dev/sdb
/dev/sdb1 /home/project42 ext2 rw 0 0</screen>
		</section>
<?hard-pagebreak?>
		<section><title>df</title>
		<para>A more user friendly way to look at mounted file systems is <command>df</command><indexterm><primary>df(1)</primary></indexterm>. The <command>df (diskfree)</command> command has the added benefit of showing you the free space on each mounted disk. Like a lot of Linux commands, <command>df</command> supports the <command>-h</command> switch to make the output more <command>human readable</command>.</para>
		<screen>root@RHELv8u2:~# df
Filesystem           1K-blocks      Used Available Use% Mounted on
/dev/mapper/VolGroup00-LogVol00
11707972   6366996   4746240  58% /
/dev/sda1             101086    9300    86567  10% /boot
none                  127988       0   127988   0% /dev/shm
/dev/sdb1             108865    1550   101694   2% /home/project42
root@RHELv8u2:~# df -h
Filesystem            Size  Used Avail Use% Mounted on
/dev/mapper/VolGroup00-LogVol00
12G  6.1G  4.6G  58% /
/dev/sda1              99M  9.1M   85M  10% /boot
none                  125M     0  125M   0% /dev/shm
/dev/sdb1             107M  1.6M  100M   2% /home/project42</screen>
		</section>
		<section><title>df -h</title>
                <para>In the <command>df -h</command><indexterm><primary>df(1)</primary></indexterm> example below you can see the size, free space, used gigabytes and percentage and mount point of a partition.</para>
                <screen>root@laika:~# df -h | egrep -e "(sdb2|File)"
Filesystem            Size Used Avail Use% Mounted on
/dev/sdb2              92G   83G  8.6G  91% /media/sdb2</screen>
		</section>
        	<section><title>du</title>
        	        <para>The <command>du</command><indexterm><primary>du(1)</primary></indexterm> command can summarize <command>disk usage</command> for files and directories. By using <command>du</command> on a mount point you effectively get the disk space used on a file system.</para>
			<para>While <command>du</command> can go display each subdirectory recursively, the <command>-s</command> option will give you a total summary for the parent directory. This option is often used together with <command>-h</command>. This means <command>du -sh</command> on a mount point gives the total amount used by the file system in that partition.</para>
        	        <screen>root@debian6~# du -sh /boot /srv/wolf
6.2M	/boot
1.1T	/srv/wolf</screen>
		</section>
	</section>
<?hard-pagebreak?>
	<section><title>from start to finish</title>
		<para>Below is a screenshot that show a summary roadmap starting with detection of the hardware (/dev/sdb) up until mounting on <command>/mnt</command>.</para>
		<screen>[root@centos65 ~]# <command>dmesg | grep '\[sdb\]'</command>
sd 3:0:0:0: [sdb] 150994944 512-byte logical blocks: (77.3 GB/72.0 GiB)
sd 3:0:0:0: [sdb] Write Protect is off
sd 3:0:0:0: [sdb] Mode Sense: 00 3a 00 00
sd 3:0:0:0: [sdb] Write cache: enabled, read cache: enabled, doesn't support \
DPO or FUA
sd 3:0:0:0: [sdb] Attached SCSI disk

[root@centos65 ~]# <command>parted /dev/sdb</command>

(parted) <command>mklabel msdos</command>
(parted) <command>mkpart primary ext4 1 77000</command>
(parted) <command>print</command>
Model: ATA VBOX HARDDISK (scsi)
Disk /dev/sdb: 77.3GB
Sector size (logical/physical): 512B/512B
Partition Table: msdos

Number  Start   End     Size    Type     File system  Flags
 1      1049kB  77.0GB  77.0GB  primary

(parted) <command>quit</command>
[root@centos65 ~]# <command>mkfs.ext4 /dev/sdb1</command>
mke2fs 1.41.12 (17-May-2010)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
4702208 inodes, 18798592 blocks
939929 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=4294967296
574 block groups
32768 blocks per group, 32768 fragments per group
8192 inodes per group
( output truncated )
...
[root@centos65 ~]# <command>mount /dev/sdb1 /mnt</command>
[root@centos65 ~]# <command>mount | grep mnt</command>
/dev/sdb1 on /mnt type ext4 (rw)
[root@centos65 ~]# <command>df -h | grep mnt</command>
/dev/sdb1              71G  180M   67G   1% /mnt
[root@centos65 ~]# <command>du -sh /mnt</command>
20K     /mnt
[root@centos65 ~]# <command>umount /mnt</command></screen>
	</section>
<?hard-pagebreak?>
	<section><title>permanent mounts</title>
		<para>Until now, we performed all mounts manually. This works nice, until the next reboot. Luckily there is a way to tell your computer to automatically mount certain file systems during boot.</para>
		<section><title>/etc/fstab</title>
			<para>The file system table located in <command>/etc/fstab</command><indexterm><primary>/etc/fstab</primary></indexterm> contains a list of file systems, with an option to automtically mount each of them at boot time.</para>
			<para>Below is a sample <command>/etc/fstab</command> file.</para>
			<screen>root@RHELv8u2:~# cat /etc/fstab 
/dev/VolGroup00/LogVol00 /                ext3    defaults        1 1
LABEL=/boot             /boot             ext3    defaults        1 2
none                    /dev/pts          devpts  gid=5,mode=620  0 0
none                    /dev/shm          tmpfs   defaults        0 0
none                    /proc             proc    defaults        0 0
none                    /sys              sysfs   defaults        0 0
/dev/VolGroup00/LogVol01 swap             swap    defaults        0 0</screen>
			<para>By adding the following line, we can automate the mounting of a file system.</para>
			<screen>/dev/sdb1                /home/project42      ext2    defaults    0 0</screen>
		</section>
		<section><title>mount /mountpoint</title>
			<para>Adding an entry to <command>/etc/fstab</command> has the added advantage that you can simplify the <command>mount</command> command. The command in the screenshot below forces <command>mount</command> to look for the partition info in <command>/etc/fstab</command>.</para>
			<screen>root@rhel65:~# mount /home/project42</screen>
		</section>
	</section>
<?hard-pagebreak?>
	<section><title>securing mounts</title>
		<para>File systems can be secured with several <command>mount options</command>. Here are some examples.</para>
		<section><title>ro</title>
			<para>The <command>ro</command> option will mount a file system as read only, preventing anyone from writing.</para>
			<screen>root@rhel53 ~# mount -t ext2 -o ro /dev/hdb1 /home/project42
root@rhel53 ~# touch /home/project42/testwrite
touch: cannot touch `/home/project42/testwrite': Read-only file system</screen>
		</section>
		<section><title>noexec</title>
			<para>The <command>noexec</command><indexterm><primary>noexec(mount)</primary></indexterm> option will prevent the execution of binaries and scripts on the mounted file system.</para>
			<screen>root@rhel53 ~# mount -t ext2 -o noexec /dev/hdb1 /home/project42
root@rhel53 ~# cp /bin/cat /home/project42
root@rhel53 ~# /home/project42/cat /etc/hosts
-bash: /home/project42/cat: Permission denied
root@rhel53 ~# echo echo hello > /home/project42/helloscript
root@rhel53 ~# chmod +x /home/project42/helloscript 
root@rhel53 ~# /home/project42/helloscript 
-bash: /home/project42/helloscript: Permission denied</screen>
		</section>
		<section><title>nosuid</title>
			<para>The <command>nosuid</command><indexterm><primary>nosuid(mount)</primary></indexterm> option will ignore <command>setuid</command><indexterm><primary>setuid</primary></indexterm> bit set binaries on the mounted file system.</para>
			<para>Note that you can still set the <command>setuid</command> bit on files.</para>
			<screen>root@rhel53 ~# mount -o nosuid /dev/hdb1 /home/project42
root@rhel53 ~# cp /bin/sleep /home/project42/
root@rhel53 ~# chmod 4555 /home/project42/sleep 
root@rhel53 ~# ls -l /home/project42/sleep 
-r-sr-xr-x 1 root root 19564 Jun 24 17:57 /home/project42/sleep
			</screen>
			<para>But users cannot exploit the <command>setuid</command> feature.</para>
			<screen>
root@rhel53 ~# su - paul
[paul@rhel53 ~]$ /home/project42/sleep 500 &#038;
[1] 2876
[paul@rhel53 ~]$ ps -f 2876
UID        PID  PPID  C STIME TTY      STAT   TIME CMD
paul      2876  2853  0 17:58 pts/0    S      0:00 /home/project42/sleep 500
[paul@rhel53 ~]$</screen>
		</section>
		<section><title>noacl</title>
			<para>To prevent cluttering permissions with <command>acl's</command>, use the <command>noacl</command><indexterm><primary>noacl(mount)</primary></indexterm> option.</para>
			<screen>root@rhel53 ~# mount -o noacl /dev/hdb1 /home/project42</screen>
		</section>
		<para>More <command>mount options</command> can be found in the manual page of <command>mount</command>.</para>
	</section>
<?hard-pagebreak?>
<section><title>mounting remote file systems</title>
	<section><title>smb/cifs</title>
	<para>The Samba team (samba.org) has a Unix/Linux service that is compatible with the SMB/CIFS protocol. This protocol is mainly used by networked Microsoft Windows computers.</para>
	<para>Connecting to a Samba server (or to a Microsoft computer) is also done with the mount command.</para>
	<para>This example shows how to connect to the <command>10.0.0.42</command> server, to a share named <command>data2</command>.</para>
	<screen>[root@centos65 ~]# mount -t cifs -o user=paul //10.0.0.42/data2 /home/data2
Password: 
[root@centos65 ~]# mount | grep cifs
//10.0.0.42/data2 on /home/data2 type cifs (rw)</screen>
	<para>The above requires <command>yum install cifs-client</command>.</para>
	</section>
<section><title>nfs</title>
	<para>Unix servers often use <command>nfs</command> (aka the network file system) to share directories over the network. Setting up an nfs server is discussed later. Connecting as a client to an nfs server is done with <command>mount</command>, and is very similar to connecting to local storage.</para>
	<para>This command shows how to connect to the nfs server named <command>server42</command>, which is sharing the directory <command>/srv/data</command>. The <command>mount point</command> at the end of the command (<command>/home/data</command>) must already exist.</para>
	<screen>[root@centos65 ~]# mount -t nfs server42:/srv/data /home/data
[root@centos65 ~]#</screen>
	<para>If this <command>server42</command> has ip-address <command>10.0.0.42</command> then you can also write:</para>
	<screen>[root@centos65 ~]# mount -t nfs 10.0.0.42:/srv/data /home/data
[root@centos65 ~]# mount | grep data
10.0.0.42:/srv/data on /home/data type nfs (rw,vers=4,addr=10.0.0.42,clienta\
ddr=10.0.0.33)</screen>
	</section>
	<section><title>nfs specific mount options</title>
		<screen><command>bg</command> If mount fails, retry in background.
<command>fg</command> (default)If mount fails, retry in foreground.
<command>soft</command> Stop trying to mount after X attempts.
<command>hard</command> (default)Continue trying to mount.</screen>
		<para>The <command>soft+bg</command> options combined guarantee the fastest client boot if there are NFS problems.</para>
<screen><command>retrans=X</command> Try X times to connect (over udp).
<command>tcp</command> Force tcp (default and supported)
<command>udp</command> Force udp (unsupported)</screen>
	</section>
</section>
