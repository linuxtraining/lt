<?hard-pagebreak?>
<section><title>displaying memory and cache</title>
<section><title>/proc/meminfo</title>
	<para>Displaying <command>/proc/meminfo</command><indexterm><primary>/proc/meminfo</primary></indexterm> will tell you a lot about the memory on your Linux computer.</para>
<screen>paul@ubu1010:~$ cat /proc/meminfo 
MemTotal:        3830176 kB
MemFree:          244060 kB
Buffers:           41020 kB
Cached:          2035292 kB
SwapCached:         9892 kB
...</screen>
	<para>The first line contains the total amount of physical RAM, the second line is the unused RAM. <command>Buffers</command> is RAM used for buffering files, <command>cached</command> is the amount of RAM used as cache and <command>SwapCached</command> is the amount of swap used as cache. The file gives us much more information outside of the scope of this course.</para>
</section>
<section><title>free</title>
	<para>The <command>free</command><indexterm><primary>free(1)</primary></indexterm> tool can display the information provided by <command>/proc/meminfo</command> in a more readable format. The example below displays brief memory information in megabytes.</para>
	<screen>paul@ubu1010:~$ free -om
           total       used       free     shared    buffers     cached
Mem:        3740       3519        221          0         42       1994
Swap:       6234         82       6152</screen>
</section>
<section><title>top</title>
	<para>The <command>top</command><indexterm><primary>top(1)</primary></indexterm> tool is often used to look at processes consuming most of the cpu, but it also displays memory information on line four and five (which can be toggled by pressing <command>m</command>).</para>
	<para>Below a screenshot of top on the same ubu1010 from above.</para>
<screen>top - 10:44:34 up 16 days, 9:56, 6 users, load average: 0.13, 0.09, 0.12
Tasks: 166 total,   1 running, 165 sleeping,   0 stopped,   0 zombie
Cpu(s):  5.1%us, 4.6%sy, 0.6%ni, 88.7%id, 0.8%wa, 0.0%hi, 0.3%si, 0.0%st
Mem:   3830176k total,  3613720k used,   216456k free,    45452k buffers
Swap:  6384636k total,    84988k used,  6299648k free,  2050948k cached</screen>
</section>
</section>
<?hard-pagebreak?>
<section><title>managing swap space</title>
	<section><title>about swap space</title>
		<para>When the operating system needs more memory than physically present in RAM, it can use <command>swap space</command><indexterm><primary>swap space</primary></indexterm>. Swap space is located on slower but cheaper memory. Notice that, although hard disks are commonly used for swap space, their access times are one hundred thousand times slower.</para>
		<para>The swap space can be a file, a partition, or a combination of files and partitions. You can see the swap space with the <command>free</command> command, or with <command>cat /proc/swaps</command><indexterm><primary>/proc/swaps</primary></indexterm>.</para>
		<screen>paul@ubu1010:~$ free -o | grep -v Mem
           total       used       free     shared    buffers     cached
Swap:    6384636      84988    6299648
paul@ubu1010:~$ cat /proc/swaps
Filename                Type            Size     Used   Priority
/dev/sda3               partition       6384636	 84988  -1</screen>
		<para>The amount of swap space that you need depends heavily on the services that the computer provides.</para>
	</section>
	<section><title>creating a swap partition</title>
		<para>You can activate or deactivate swap space with the <command>swapon</command><indexterm><primary>swapon(1)</primary></indexterm> and <command>swapoff</command><indexterm><primary>swapoff(1)</primary></indexterm> commands. New swap space can be created with the <command>mkswap</command><indexterm><primary>mkswap(1)</primary></indexterm> command. The screenshot below shows the creation and activation of a swap partition.</para>
		<screen>root@RHELv8u4:~# fdisk -l 2> /dev/null | grep hda
Disk /dev/hda: 536 MB, 536870912 bytes
/dev/hda1               1        1040      524128+  83  Linux
root@RHELv8u4:~# mkswap /dev/hda1
Setting up swapspace version 1, size = 536702 kB
root@RHELv8u4:~# swapon /dev/hda1</screen>
		<para>Now you can see that <command>/proc/swaps</command> displays all swap spaces separately, whereas the <command>free -om</command> command only makes a human readable summary.</para> 
		<screen>root@RHELv8u4:~# cat /proc/swaps
Filename                          Type         Size    Used    Priority
/dev/mapper/VolGroup00-LogVol01   partition    1048568 0       -1
/dev/hda1                         partition    524120  0       -2
root@RHELv8u4:~# free -om
          total     used    free   shared    buffers    cached
Mem:        249      245       4        0        125        54
Swap:      1535        0    1535</screen>
	</section>
<?hard-pagebreak?>
	<section><title>creating a swap file</title>
		<para>Here is one more example showing you how to create a <command>swap file</command>. On Solaris you can use <command>mkfile</command><indexterm><primary>mkfile(1)</primary></indexterm> instead of <command>dd</command><indexterm><primary>dd(1)</primary></indexterm>.</para>
		<screen>root@RHELv8u4:~# dd if=/dev/zero of=/smallswapfile bs=1024 count=4096
4096+0 records in
4096+0 records out
root@RHELv8u4:~# mkswap /smallswapfile 
Setting up swapspace version 1, size = 4190 kB
root@RHELv8u4:~# swapon /smallswapfile 
root@RHELv8u4:~# cat /proc/swaps 
Filename                          Type        Size    Used   Priority
/dev/mapper/VolGroup00-LogVol01   partition   1048568 0      -1
/dev/hda1                         partition   524120  0      -2
/smallswapfile                    file        4088    0      -3</screen>
	</section>
	<section><title>swap space in /etc/fstab</title>
		<para>If you like these swaps to be permanent, then don't forget to add them to <command>/etc/fstab</command><indexterm><primary>/etc/fstab</primary></indexterm>. The lines in /etc/fstab will be similar to the following.</para>
		<screen>/dev/hda1         swap       swap     defaults      0 0
/smallswapfile    swap       swap     defaults      0 0</screen>	
	</section>
</section>
<?hard-pagebreak?>
<section><title>monitoring memory with vmstat</title>
	<para>You can find information about <command>swap usage</command><indexterm><primary>swap partition(s)</primary></indexterm> using <command>vmstat</command><indexterm><primary>vmstat</primary></indexterm>.</para>
	<para>Below a simple <command>vmstat</command> displaying information in megabytes.</para>
	<screen>paul@ubu1010:~$ vmstat -S m
procs ---------memory-------- ---swap-- -----io---- -system- ----cpu----
 r  b  swpd  free  buff cache  si   so   bi    bo    in   cs us sy id wa
 0  0    87   225    46  2097   0    0    2     5    14    8  6  5 89  1</screen>
	<para>Below a sample <command>vmstat</command> when (in another terminal) root launches a <command>find /</command>. It generates a lot of disk i/o (bi and bo are disk blocks in and out). There is no need for swapping here.</para>
	<screen>paul@ubu1010:~$ vmstat 2 100
procs ----------memory---------- ---swap-- -----io---- -system-- ----cpu----
 r  b   swpd   free  buff  cache   si   so    bi    bo   in   cs us sy id wa
 0  0  84984 1999436 53416 269536   0    0     2     5    2   10  6  5 89  1
 0  0  84984 1999428 53416 269564   0    0     0     0 1713 2748  4  4 92  0
 0  0  84984 1999552 53416 269564   0    0     0     0 1672 1838  4  6 90  0
 0  0  84984 1999552 53424 269560   0    0     0    14 1587 2526  5  7 87  2
 0  0  84984 1999180 53424 269580   0    0     0   100 1748 2193  4  6 91  0
 1  0  84984 1997800 54508 269760   0    0   610     0 1836 3890 17 10 68  4
 1  0  84984 1994620 55040 269748   0    0   250   168 1724 4365 19 17 56  9
 0  1  84984 1978508 55292 269704   0    0   126     0 1957 2897 19 18 58  4
 0  0  84984 1974608 58964 269784   0    0  1826   478 2605 4355  7  7 44 41
 0  2  84984 1971260 62268 269728   0    0  1634   756 2257 3865  7  7 47 39</screen>
	<para>Below a sample <command>vmstat</command> when executing (on RHEL6) a simple memory leaking program. Now you see a lot of memory being swapped (si is 'swapped in').</para>
	<screen>[paul@rhel6c ~]$ vmstat 2 100

procs ----------memory-------- ---swap-- ----io---- --system-- -----cpu-----
 r  b   swpd  free  buff cache   si   so   bi    bo   in   cs us sy id wa st
 0  3 245208  5280   232  1916  261    0    0    42   27   21  0  1 98  1  0
 0  2 263372  4800    72   908 143840  128  0  1138  462  191  2 10  0 88  0
 1  3 350672  4792    56   992 169280  256  0  1092  360  142  1 13  0 86  0
 1  4 449584  4788    56  1024 95880   64   0   606  471  191  2 13  0 85  0
 0  4 471968  4828    56  1140 44832   80   0   390  235   90  2 12  0 87  0
 3  5 505960  4764    56  1136 68008   16   0   538  286  109  1 12  0 87  0</screen>
	<para>The code below was used to simulate a memory leak (and force swapping). This code was found on wikipedia without author.</para>
	<screen>paul@mac:~$ cat memleak.c 
#include &#060;stdlib.h&#062;
 
int main(void)
{
     while (malloc(50));
     return 0;
}</screen>
</section>
