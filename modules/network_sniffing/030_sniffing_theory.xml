<?hard-pagebreak?>
<section><title>wireshark</title>
	<section><title>installing wireshark</title>
		<para>This example shows how to install <command>wireshark</command> on <command>.deb</command> based distributions (including Debian, Mint, Xubuntu, and others).</para>
		<screen>root@debian8:~# <command>apt-get install wireshark</command>
Reading package lists... Done
Building dependency tree
Reading state information... Done
... (output truncated)</screen>
		<para>On <command>.rpm</command> based distributions like CentOS, RHEL and Fedora you can use <command>yum</command> to install <command>wireshark</command>.</para>
		<screen>[root@centos7 ~]# <command>yum install wireshark</command>
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
... (output truncated)</screen>
	</section>
	<section><title>selecting interface</title>
		<para>When you start <command>wireshark</command> for the first time, you will need to select an interface. You will see a dialog box that looks similar to this one.</para>
		<para><mediaobject><imageobject><imagedata fileref="images/wireshark_capture_interfaces.png" format="EPS" align="center"></imagedata></imageobject></mediaobject></para>
		<para>It is possible that there are no interfaces available because some distributions only allow root to sniff the network. You may need to use <command>sudo wireshark</command>.</para>
		<para>Or you can follow the general advice to sniff using <command>tcpdump</command> or any other tool, and save the capture to a file. Any saved capture can be analyzed using <command>wireshark</command> at a later time.</para>
	</section>
<?hard-pagebreak?>
	<section><title>minimize traffic</title>
		<para>Sniffing a network can generate many thousands of packets in a very short time. This can be overwhelming. Try to mitigate by isolating your sniffer on the network. Preferably sniff an isolated virtual network interface over which you control all traffic.</para>
		<para>If you are at home to learn sniffing, then it could help to close all network programs on your computer, and disconnect other computers and devices like smartphones and tablets to minimize the traffic.</para>
		<para>Even more important than this is the use of <command>filters</command> which will be discussed in this chapter.</para>
	</section>
	<section><title>sniffing ping</title>
		<para>I started the sniffer and captured all packets while doing these three <command>ping</command> commands (there is no need for root to do this):</para>
		<screen>root@debian10:~# <command>ping -c2 ns1.paul.local</command>
PING ns1.paul.local (10.104.33.30) 56(84) bytes of data.
64 bytes from 10.104.33.30: icmp_req=1 ttl=64 time=0.010 ms
64 bytes from 10.104.33.30: icmp_req=2 ttl=64 time=0.023 ms

--- ns1.paul.local ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1001ms
rtt min/avg/max/mdev = 0.010/0.016/0.023/0.007 ms
root@debian10:~# <command>ping -c3 linux-training.be</command>
PING linux-training.be (188.93.155.87) 56(84) bytes of data.
64 bytes from antares.ginsys.net (188.93.155.87): icmp_req=1 ttl=56 time=15.6 ms
64 bytes from antares.ginsys.net (188.93.155.87): icmp_req=2 ttl=56 time=17.8 ms
64 bytes from antares.ginsys.net (188.93.155.87): icmp_req=3 ttl=56 time=14.7 ms

--- linux-training.be ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2003ms
rtt min/avg/max/mdev = 14.756/16.110/17.881/1.309 ms
root@debian10:~# <command>ping -c1 centos7.paul.local</command>
PING centos7.paul.local (10.104.33.31) 56(84) bytes of data.
64 bytes from 10.104.33.31: icmp_req=1 ttl=64 time=0.590 ms

--- centos7.paul.local ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 0.590/0.590/0.590/0.000 ms</screen>
		<para>In total more than 200 packets were sniffed from the network. Things become clearer when you enter <command>icmp</command> in the filter field and press the <command>apply</command> button.</para>
		<para><mediaobject><imageobject><imagedata fileref="images/wireshark_ping.png" format="EPS" align="center"></imagedata></imageobject></mediaobject></para>
	</section>
<?hard-pagebreak?>
	<section><title>sniffing ping and dns</title>
		<para>Using the same capture as before, but now with a different <command>filter</command>. We want to see both <command>dns</command> and <command>icmp</command> traffic, so we enter both in the filter field.</para>
		<para>We put <command>dns or icmp</command> in the filter to achieve this. Putting <command>dns and icmp</command> would render nothing because there is no packet that matches both protocols.</para>
		<para><mediaobject><imageobject><imagedata fileref="images/wireshark_icmpordns.png" format="EPS" align="center"></imagedata></imageobject></mediaobject></para>
		<para>In the screenshot above you can see that packets 25 and 26 both have 10.104.33.30 as <command>source</command> and <command>destination</command> ip address. That is because the dns client is the same computer as the dns server.</para>
		<para>The same is true for packets 31 and 32, since the machine is actually pinging itself.</para>
	</section>
	<section><title>specific ip address</title>
		<para>This is a screenshot that filters for <command>dns</command> packets that contain a certain <command>ip address</command>. The filter in use is <command>ip.addr==10.104.33.30 and dns</command>. The <command>and</command> directive forces each displayed packet to match both conditions.</para>
		<para><mediaobject><imageobject><imagedata fileref="images/wireshark_ipanddns.png" format="EPS" align="center"></imagedata></imageobject></mediaobject></para>
		<para>Packet 93 is the <command>dns query</command> for the A record of linux-training.be. Packet 98 is the response from the <command>dns server</command>. What do you think happened in the packets between 93 and 98 ? Try to answer this before reading on (it always helps to try to predict what you will see, and then checking your prediction).</para>
	</section>
	<section><title>filtering by frame</title>
		<para>The correct technical term for a <command>packet</command> as sniffed is a <command>frame</command> (because we sniff on layer two). So to display packets with certain numbers, we use <command>frame.number</command> in the filter.</para>
		<para><mediaobject><imageobject><imagedata fileref="images/wireshark_framenumber.png" format="EPS" align="center"></imagedata></imageobject></mediaobject></para>
	</section>
<?hard-pagebreak?>
	<section><title>looking inside packets</title>
		<para>The middle pane can be expanded. When selecting a line in this pane, you can see the corresponding bytes in the frame in the bottom panel.</para>
		<para>This screenshot shows the middle pane with the source address of my laptop selected.</para>
		<para><mediaobject><imageobject><imagedata fileref="images/wireshark_source_mac.png" format="EPS" align="center"></imagedata></imageobject></mediaobject></para>
		<para>Note that the above works fine when sniffing one interface. When sniffing with for example <command>tcpdump -i any</command> you will end up with <command>Linux cooked</command> at this level.</para>
		<para><mediaobject><imageobject><imagedata fileref="images/wireshark_cooked.png" format="EPS" align="center"></imagedata></imageobject></mediaobject></para>
	</section>
	<section><title>other filter examples</title>
		<para>You can combine two protocols with a logical <command>or</command> between them. The example below shows how to filter only <command>arp</command> and <command>bootp</command><indexterm><primary>bootp</primary></indexterm> (or <command>dhcp</command><indexterm><primary>dhcp</primary></indexterm>) packets.</para>
		<para><mediaobject><imageobject><imagedata fileref="images/wireshark_arp_bootp.png" format="EPS" align="center"></imagedata></imageobject></mediaobject></para>
		<para>This example shows how to filter for <command>dns</command><indexterm><primary>dns</primary></indexterm> traffic containing a certain <command>ip address</command>.</para>
		<para><mediaobject><imageobject><imagedata fileref="images/wireshark_dns_ipaddress.png" format="EPS" align="center"></imagedata></imageobject></mediaobject></para>
	</section>
</section>
<?hard-pagebreak?>
<section><title>tcpdump</title>
	<para>Sniffing on the command line can be done with <command>tcpdump</command><indexterm><primary>tcpdump</primary></indexterm>. Here are some examples.</para>
	<para>Using the <command>tcpdump host $ip</command> command displays all traffic with one host (192.168.1.38 in this example).</para>
	<screen>root@ubuntu910:~# tcpdump host 192.168.1.38
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 96 bytes</screen>
	<para>Capturing only ssh (tcp port 22) traffic can be done with <command>tcpdump tcp port $port</command>. This screenshot is cropped to 76 characters for readability in the pdf.</para>
	<screen>root@deb503:~# tcpdump tcp port 22
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth1, link-type EN10MB (Ethernet), capture size 96 bytes
14:22:20.716313 IP deb503.local.37973 > rhel53.local.ssh: P 666050963:66605
14:22:20.719936 IP rhel53.local.ssh > deb503.local.37973: P 1:49(48) ack 48
14:22:20.720922 IP rhel53.local.ssh > deb503.local.37973: P 49:113(64) ack 
14:22:20.721321 IP rhel53.local.ssh > deb503.local.37973: P 113:161(48) ack
14:22:20.721820 IP deb503.local.37973 > rhel53.local.ssh: . ack 161 win 200
14:22:20.722492 IP rhel53.local.ssh > deb503.local.37973: P 161:225(64) ack
14:22:20.760602 IP deb503.local.37973 > rhel53.local.ssh: . ack 225 win 200
14:22:23.108106 IP deb503.local.54424 > ubuntu910.local.ssh: P 467252637:46
14:22:23.116804 IP ubuntu910.local.ssh > deb503.local.54424: P 1:81(80) ack
14:22:23.116844 IP deb503.local.54424 > ubuntu910.local.ssh: . ack 81 win 2
^C
10 packets captured
10 packets received by filter
0 packets dropped by kernel</screen>
	<para>Same as above, but write the output to a file with the <command>tcpdump -w $filename</command> command.</para>
	<screen>root@ubuntu910:~# tcpdump -w sshdump.tcpdump tcp port 22
tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 96 bytes
^C
17 packets captured
17 packets received by filter
0 packets dropped by kernel</screen>
	<para>With <command>tcpdump -r $filename</command><indexterm><primary>tcpdump</primary></indexterm> the file created above can be displayed.</para>
	<screen>root@ubuntu910:~# tcpdump -r sshdump.tcpdump</screen>
	<para>Many more examples can be found in the manual page of <command>tcpdump</command>.</para>
</section>
