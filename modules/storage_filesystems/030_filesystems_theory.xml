<?hard-pagebreak?>
<section><title>about file systems</title>
	<para>A file system is a way of organizing files on your partition. Besides file-based storage, file systems usually include <command>directories</command><indexterm><primary>directory</primary></indexterm> and <command>access control</command>, and contain meta information about files like access times, modification times and file ownership. </para>
	<para>The properties (length, character set, ...) of filenames are determined by the file system you choose. Directories are usually implemented as files, you will have to learn how this is implemented! Access control in file systems is tracked by user ownership (and group owner- and membership) in combination with one or more access control lists.</para>
	<section><title>man fs</title>
		<para>The manual page about filesystems is accessed by typing <command>man fs</command>.</para>
		<screen>[root@rhel65 ~]# man fs</screen>
	</section>
	<section><title>/proc/filesystems</title>
		<para>The Linux kernel will inform you about currently loaded file system drivers in <command>/proc/filesystems</command>.</para>
	<screen>root@rhel53 ~# cat /proc/filesystems  | grep -v nodev
	ext2
	iso9660
	ext3</screen>
	</section>
	<section><title>/etc/filesystems</title>
		<para>The <command>/etc/filesystems</command> file contains a list of autodetected filesystems (in case the <command>mount</command> command is used without the <command>-t</command> option.</para>
		<para>Help for this file is provided by <command>man mount</command>.</para>
		<screen>[root@rhel65 ~]# man mount</screen>
	</section>
</section>
<?hard-pagebreak?>
<section><title>common file systems</title>
	<section><title>ext2 and ext3</title>
		<para>Once the most common Linux file systems is the <command>ext2</command><indexterm><primary>ext2</primary></indexterm> (the second extended) file system. A disadvantage is that file system checks on ext2 can take a long time.</para>
		<para><command>ext2</command> was being replaced by <command>ext3</command><indexterm><primary>ext3</primary></indexterm> on most Linux machines. They are essentially the same, except for the <command>journaling</command><indexterm><primary>journaling</primary></indexterm> which is only present in ext3.</para>
		<para>Journaling means that changes are first written to a journal on the disk. The journal is flushed regularly, writing the changes in the file system. Journaling keeps the file system in a consistent state, so you don't need a file system check after an unclean shutdown or power failure.</para>
	</section>
	<section><title>creating ext2 and ext3</title>
		<para>You can create these file systems with the <command>/sbin/mkfs</command><indexterm><primary>mkfs(1)</primary></indexterm> or <command>/sbin/mke2fs</command><indexterm><primary>mke2fs(1)</primary></indexterm> commands. Use <command>mke2fs -j</command> to create an <command>ext3</command> file system.</para>
		<para>You can convert an ext2 to ext3 with <command>tune2fs -j</command><indexterm><primary>tune2fs(1)</primary></indexterm>. You can mount an ext3 file system as ext2, but then you lose the journaling. Do not forget to run <command>mkinitrd</command><indexterm><primary>mkinitrd(1)</primary></indexterm> if you are booting from this device.</para>
	</section>
	<section><title>ext4</title>
		<para>The newest incarnation of the ext file system is named <command>ext4</command> and is available in the Linux kernel since 2008. <command>ext4</command> supports larger files (up to 16 terabyte) and larger file systems than <command>ext3</command> (and many more features).</para>
		<para>Development started by making <command>ext3</command> fully capable for 64-bit. When it turned out the changes were significant, the developers decided to name it <command>ext4</command>.</para>
	</section>
	<section><title>xfs</title>
		<para>Redhat Enterprise Linux 7 will have <command>XFS</command> as the default file system. This is a highly scalable high-performance file system.</para>
		<para><command>xfs</command> was created for <command>Irix</command> and for a couple of years it was also used in <command>FreeBSD</command>. It is supported by the Linux kernel, but rarely used in dsitributions outside of the Redhat/CentOS realm.</para>
	</section>
<?hard-pagebreak?>
	<section><title>vfat</title>
		<para>The <command>vfat</command><indexterm><primary>vfat</primary></indexterm> file system exists in a couple of forms : <command>fat12</command> for floppy disks, <command>fat16</command><indexterm><primary>fat16</primary></indexterm> on <command>ms-dos</command>, and <command>fat32</command><indexterm><primary>fat32</primary></indexterm> for larger disks. The Linux <command>vfat</command> implementation supports all of these, but vfat lacks a lot of features like security and links. <command>fat</command> disks can be read by every operating system, and are used a lot for digital cameras, <command>usb</command> sticks and to exchange data between different OS'ses on a home user's computer.</para>
	</section>
	<section><title>iso 9660</title>
		<para><command>iso 9660</command><indexterm><primary>iso9660</primary></indexterm> is the standard format for cdroms. Chances are you will encounter this file system also on your hard disk in the form of images of cdroms (often with the .iso extension). The <command>iso 9660</command> standard limits filenames to the 8.3 format. The Unix world didn't like this, and thus added the <command>rock ridge</command><indexterm><primary>rock ridge</primary></indexterm> extensions, which allows for filenames up to 255 characters and Unix-style file-modes, ownership and symbolic links. Another extensions to <command>iso 9660</command> is <command>joliet</command><indexterm><primary>joliet</primary></indexterm>, which adds 64 unicode characters to the filename. The <command>el torito</command><indexterm><primary>el torito</primary></indexterm> standard extends <command>iso 9660</command> to be able to boot from CD-ROM's.</para>
	</section>
	<section><title>udf</title>
		<para>Most optical media today (including cd's and dvd's) use <command>udf</command><indexterm><primary>udf</primary></indexterm>, the Universal Disk Format.</para>
	</section>
	<section><title>swap</title>
		<para>All things considered, swap is not a file system. But to use a partition as a <command>swap partition</command><indexterm><primary>swap partition</primary></indexterm> it must be formatted and mounted as swap space.</para>
	</section>
	<section><title>gfs</title>
		<para>Linux clusters often use a dedicated cluster filesystem like GFS, GFS2, ClusterFS, ...</para>
	</section>
	<section><title>and more...</title>
		<para>You may encounter <command>reiserfs</command><indexterm><primary>reiserfs</primary></indexterm> on older Linux systems. Maybe you will see Sun's <command>zfs</command><indexterm><primary>zfs</primary></indexterm> or the open source <command>btrfs</command><indexterm><primary>btrfs</primary></indexterm>. This last one requires a chapter on itself.</para>
	</section>
<?hard-pagebreak?>
	<section><title>/proc/filesystems</title>
		<para>The <command>/proc/filesystems</command><indexterm><primary>/proc/filesystems</primary></indexterm> file displays a list of supported file systems. When you mount a file system without explicitly defining one, then mount will first try to probe <command>/etc/filesystems</command><indexterm><primary>/etc/filesystems</primary></indexterm> and then probe <command>/proc/filesystems</command> for all the filesystems without the <command>nodev</command><indexterm><primary>nodev</primary></indexterm> label. If <command>/etc/filesystems</command> ends with a line containing only an asterisk (*) then both files are probed.</para> 
		<screen>paul@RHELv8u4:~$ cat /proc/filesystems 
nodev   sysfs
nodev   rootfs
nodev   bdev
nodev   proc
nodev   sockfs
nodev   binfmt_misc
nodev   usbfs
nodev   usbdevfs
nodev   futexfs
nodev   tmpfs
nodev   pipefs
nodev   eventpollfs
nodev   devpts
        ext2
nodev   ramfs
nodev   hugetlbfs
        iso9660
nodev   relayfs
nodev   mqueue
nodev   selinuxfs
        ext3
nodev   rpc_pipefs
nodev   vmware-hgfs
nodev   autofs
paul@RHELv8u4:~$</screen>
	</section>
</section>
<?hard-pagebreak?>
<section><title>putting a file system on a partition</title>
	<para>We now have a fresh partition. The system binaries to make file systems can be found with ls.</para>
	<screen>[root@RHEL4b ~]# ls -lS /sbin/mk*
-rwxr-xr-x  3 root root 34832 Apr 24  2006 /sbin/mke2fs
-rwxr-xr-x  3 root root 34832 Apr 24  2006 /sbin/mkfs.ext2
-rwxr-xr-x  3 root root 34832 Apr 24  2006 /sbin/mkfs.ext3
-rwxr-xr-x  3 root root 28484 Oct 13  2004 /sbin/mkdosfs
-rwxr-xr-x  3 root root 28484 Oct 13  2004 /sbin/mkfs.msdos
-rwxr-xr-x  3 root root 28484 Oct 13  2004 /sbin/mkfs.vfat
-rwxr-xr-x  1 root root 20313 Apr 10  2006 /sbin/mkinitrd
-rwxr-x---  1 root root 15444 Oct  5  2004 /sbin/mkzonedb
-rwxr-xr-x  1 root root 15300 May 24  2006 /sbin/mkfs.cramfs
-rwxr-xr-x  1 root root 13036 May 24  2006 /sbin/mkswap
-rwxr-xr-x  1 root root  6912 May 24  2006 /sbin/mkfs
-rwxr-xr-x  1 root root  5905 Aug  3  2004 /sbin/mkbootdisk
[root@RHEL4b ~]#</screen>
	<para>It is time for you to read the manual pages of <command>mkfs</command><indexterm><primary>mkfs(1)</primary></indexterm> and <command>mke2fs</command><indexterm><primary>mke2fs(1)</primary></indexterm>. In the example below, you see the creation of an <command>ext2 file system</command><indexterm><primary>ext2</primary></indexterm> on /dev/sdb1. In real life, you might want to use options like -m0 and -j.</para>
	<screen>root@RHELv8u2:~# mke2fs /dev/sdb1
mke2fs 1.35 (28-Feb-2004)
Filesystem label=
OS type: Linux
Block size=1024 (log=0)
Fragment size=1024 (log=0)
28112 inodes, 112420 blocks
5621 blocks (5.00%) reserved for the super user
First data block=1
Maximum filesystem blocks=67371008
14 block groups
8192 blocks per group, 8192 fragments per group
2008 inodes per group
Superblock backups stored on blocks: 
8193, 24577, 40961, 57345, 73729
		
Writing inode tables: done                            
Writing superblocks and filesystem accounting information: done
		
This filesystem will be automatically checked every 37 mounts or
180 days, whichever comes first.  Use tune2fs -c or -i to override.</screen>
</section>
<?hard-pagebreak?>
<section><title>tuning a file system</title>
	<para>You can use <command>tune2fs</command><indexterm><primary>tune2fs(1)</primary></indexterm> to list and set file system settings. The first screenshot lists the reserved space for root (which is set at five percent).</para>
	<screen>[root@rhel4 ~]# tune2fs -l /dev/sda1 | grep -i "block count"
Block count:              104388
Reserved block count:     5219
[root@rhel4 ~]#</screen>
	<para>This example changes this value to ten percent. You can use tune2fs while the file system is active, even if it is the root file system (as in this example).</para>
	<screen>[root@rhel4 ~]# tune2fs -m10 /dev/sda1 
tune2fs 1.35 (28-Feb-2004)
Setting reserved blocks percentage to 10 (10430 blocks)
[root@rhel4 ~]# tune2fs -l /dev/sda1 | grep -i "block count"
Block count:              104388
Reserved block count:     10430
[root@rhel4 ~]#</screen>
</section>
<?hard-pagebreak?>
<section><title>checking a file system</title>
	<para>The <command>fsck</command><indexterm><primary>fsck(1)</primary></indexterm> command is a front end tool used to check a file system for errors.</para>
	<screen>[root@RHEL4b ~]# ls /sbin/*fsck*
/sbin/dosfsck  /sbin/fsck         /sbin/fsck.ext2  /sbin/fsck.msdos
/sbin/e2fsck   /sbin/fsck.cramfs  /sbin/fsck.ext3  /sbin/fsck.vfat
[root@RHEL4b ~]#</screen>
	<para>The last column in <command>/etc/fstab</command><indexterm><primary>/etc/fstab</primary></indexterm> is used to determine whether a file system should be checked at boot-up.</para>
	<screen>[paul@RHEL4b ~]$ grep ext /etc/fstab 
/dev/VolGroup00/LogVol00   /             ext3    defaults        1 1
LABEL=/boot                /boot         ext3    defaults        1 2
[paul@RHEL4b ~]$</screen>
	<para>Manually checking a mounted file system results in a warning from fsck.</para>
	<screen>[root@RHEL4b ~]# fsck /boot
fsck 1.35 (28-Feb-2004)
e2fsck 1.35 (28-Feb-2004)
/dev/sda1 is mounted.  

WARNING!!!  Running e2fsck on a mounted filesystem may cause
SEVERE filesystem damage.

Do you really want to continue (y/n)? no

check aborted.</screen>
	<para>But after unmounting fsck and <command>e2fsck</command><indexterm><primary>e2fsck(1)</primary></indexterm> can be used to check an ext2 file system.</para>
	<screen>[root@RHEL4b ~]# fsck  /boot
fsck 1.35 (28-Feb-2004)
e2fsck 1.35 (28-Feb-2004)
/boot: clean, 44/26104 files, 17598/104388 blocks
[root@RHEL4b ~]# fsck -p /boot
fsck 1.35 (28-Feb-2004)
/boot: clean, 44/26104 files, 17598/104388 blocks
[root@RHEL4b ~]# e2fsck -p /dev/sda1
/boot: clean, 44/26104 files, 17598/104388 blocks</screen>
</section>
