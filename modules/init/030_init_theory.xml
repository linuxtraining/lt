<?hard-pagebreak?>
<section><title>system init(ialization)</title>
	<section><title>process id 1</title>
		<para>The kernel receives system control from the bootloader. After a while the kernel starts the <command>init daemon</command><indexterm><primary>init</primary></indexterm>. The <command>init</command> daemon (<command>/sbin/init</command>) is the first daemon that is started and receives <command>process id 1</command> (PID 1). <command>Init</command> never dies.</para>

	</section>
	<section><title>configuration in /etc/inittab</title>
		<para>When <command>/sbin/init</command><indexterm><primary>/sbin/init</primary></indexterm> is started, it will first read its configuration file <command>/etc/inittab</command><indexterm><primary>/etc/inittab</primary></indexterm>. In that file, it will look for the value of initdefault (3 in the screenshot below).</para>
		<screen>[paul@rhel4 ~]$ grep &#094;id /etc/inittab 
id:3:initdefault:</screen>
	</section>	
	<section><title>initdefault</title>
		<para>The value found in <command>initdefault</command> indicates the default <command>runlevel</command><indexterm><primary>runlevel</primary></indexterm>. Some Linux distributions have a brief description of runlevels in /etc/inittab, like here on Red Hat Enterprise Linux 4.</para>
		<screen># Default runlevel. The runlevels used by RHS are:
#   0 - halt (Do NOT set initdefault to this)
#   1 - Single user mode
#   2 - Multiuser, without NFS (The same as 3, if you don't have network)
#   3 - Full multiuser mode
#   4 - unused
#   5 - X11
#   6 - reboot (Do NOT set initdefault to this)</screen>
		<para><command>Runlevel 0</command> means the system is shutting down. <command>Runlevel 1</command> is used for troubleshooting, only the root user can log on, and only at the console. <command>Runlevel 3</command> is typical for servers, whereas <command>runlevel 5</command> is typical for desktops (graphical logon). Besides runlevels 0, 1 and 6, the use may vary depending on the distribution. Debian and derived Linux systems have full network and GUI logon on runlevels 2 to 5. So always verify the proper meaning of runlevels on your system.</para>
	</section>
<?hard-pagebreak?>
	<section><title>sysinit script</title>
		<section><title>/etc/rc.d/rc.sysinit</title>
			<para>The next line in <command>/etc/inittab</command> in Red Hat and derivatives is the following.</para>
			<screen>si::sysinit:/etc/rc.d/rc.sysinit</screen>
			<para>This means that independent of the selected runlevel, <command>init</command> will run the <command>/etc/rc.d/rc.sysinit</command><indexterm><primary>/etc/rc.d/rc.sysinit</primary></indexterm> script. This script initializes hardware, sets some basic environment, populates <command>/etc/mtab</command><indexterm><primary>/etc/mtab</primary></indexterm> while mounting file systems, starts swap and more.</para>
			<screen>[paul@rhel ~]$ egrep -e"^# Ini" -e"^# Sta" -e"^# Che" /etc/rc.d/rc.sysinit
# Check SELinux status
# Initialize hardware
# Start the graphical boot, if necessary; /usr may not be mounted yet...
# Initialiaze ACPI bits
# Check filesystems
# Start the graphical boot, if necessary and not done yet.
# Check to see if SELinux requires a relabel
# Initialize pseudo-random number generator
# Start up swapping.
# Initialize the serial ports.</screen>
			<para><emphasis>That <command>egrep</command><indexterm><primary>egrep</primary></indexterm> command could also have been written with <command>grep</command><indexterm><primary>grep</primary></indexterm> like this :</emphasis></para>
			<screen>grep "^# \(Ini\|Sta\|Che\)".</screen>
		</section>
		<section><title>/etc/init.d/rcS</title>
			<para>Debian has the following line after <command>initdefault</command>.</para>
			<screen>si::sysinit:/etc/init.d/rcS</screen>
			<para>The <command>/etc/init.d/rcS</command><indexterm><primary>/etc/init.d/rcS</primary></indexterm> script will always run on Debian (independent of the selected runlevel). The script is actually running all scripts in the <command>/etc/rcS.d/</command><indexterm><primary>/etc/rcS.d/</primary></indexterm> directory in alphabetical order.</para>
			<screen>root@barry:~# cat /etc/init.d/rcS 
#! /bin/sh
#
# rcS
#
# Call all S??* scripts in /etc/rcS.d/ in numerical/alphabetical order
#

exec /etc/init.d/rc S</screen>
		</section>
	</section>
<?hard-pagebreak?>
	<section><title>rc scripts</title>
		<para>Init will continue to read <command>/etc/inittab</command> and meets this section on Debian Linux.</para>
		<screen>l0:0:wait:/etc/init.d/rc 0
l1:1:wait:/etc/init.d/rc 1
l2:2:wait:/etc/init.d/rc 2
l3:3:wait:/etc/init.d/rc 3
l4:4:wait:/etc/init.d/rc 4
l5:5:wait:/etc/init.d/rc 5
l6:6:wait:/etc/init.d/rc 6</screen>
		<para>On Red Hat Enterprise Linux it is identical except <command>init.d</command> is <command>rc.d</command>.</para>
		<screen>l0:0:wait:/etc/rc.d/rc 0
l1:1:wait:/etc/rc.d/rc 1
l2:2:wait:/etc/rc.d/rc 2
l3:3:wait:/etc/rc.d/rc 3
l4:4:wait:/etc/rc.d/rc 4
l5:5:wait:/etc/rc.d/rc 5
l6:6:wait:/etc/rc.d/rc 6</screen>
		<para>In both cases, this means that <command>init</command> will start the rc script with the runlevel as the only parameter. Actually <command>/etc/inittab</command><indexterm><primary>/etc/inittab</primary></indexterm> has fields separated by colons. The second field determines the runlevel in which this line should be executed. So in both cases, only one line of the seven will be executed, depending on the runlevel set by <command>initdefault</command>.</para>
	</section>
	<section><title>rc directories</title>
		<para>When you take a look any of the <command>/etc/rcX.d/</command><indexterm><primary>/etc/rcX.d/</primary></indexterm> directories, then you will see a lot of (links to) scripts who's name start with either uppercase K or uppercase S.</para>
		<screen>[root@RHEL52 rc3.d]# ls -l | tail -4
lrwxrwxrwx 1 root root 19 Oct 11  2008 S98haldaemon -> ../init.d/haldaemon
lrwxrwxrwx 1 root root 19 Oct 11  2008 S99firstboot -> ../init.d/firstboot
lrwxrwxrwx 1 root root 11 Jan 21 04:16 S99local -> ../rc.local
lrwxrwxrwx 1 root root 16 Jan 21 04:17 S99smartd -> ../init.d/smartd</screen>
		<para>The <command>/etc/rcX.d/</command> directories only contain links to scripts in <command>/etc/init.d/</command>. Links allow for the script to have a different name. When entering a runlevel, all scripts that start with uppercase K or uppercase S will be started in alphabetical order. Those that start with K will be started first, with <command>stop</command> as the only parameter. The remaining scripts with S will be started with <command>start</command> as the only parameter.</para>
		<para>All this is done by the <command>/etc/rc.d/rc</command><indexterm><primary>/etc/rc.d/rc</primary></indexterm> script on Red Hat and by the <command>/etc/init.d/rc</command><indexterm><primary>/etc/init.d/rc</primary></indexterm> script on Debian.</para>
	</section>
<?hard-pagebreak?>
	<section><title>mingetty</title>
		<section><title>mingetty in /etc/inittab</title>
			<para>Almost at the end of <command>/etc/inittab</command><indexterm><primary>/etc/inittab</primary></indexterm> there is a section to start and <command>respawn</command><indexterm><primary>respawn(init)</primary></indexterm> several <command>mingetty</command><indexterm><primary>mingetty</primary></indexterm> daemons.</para>
			<screen>[root@RHEL4b ~]# grep getty /etc/inittab 
# Run gettys in standard runlevels
1:2345:respawn:/sbin/mingetty tty1
2:2345:respawn:/sbin/mingetty tty2
3:2345:respawn:/sbin/mingetty tty3
4:2345:respawn:/sbin/mingetty tty4
5:2345:respawn:/sbin/mingetty tty5
6:2345:respawn:/sbin/mingetty tty6</screen>
		</section>
		<section><title>mingetty and /bin/login</title>
			<para>This <command>/sbin/mingetty</command><indexterm><primary>/sbin/mingetty</primary></indexterm> will display a message on a virtual console and allow you to type a userid. Then it executes the <command>/bin/login</command><indexterm><primary>/bin/login</primary></indexterm> command with that userid. The <command>/bin/login</command> program will verify whether that user exists in <command>/etc/passwd</command><indexterm><primary>/etc/passwd</primary></indexterm> and prompt for (and verify) a password. If the password is correct, <command>/bin/login</command> passes control to the shell listed in <command>/etc/passwd</command>.</para>
		</section>
		<section><title>respawning mingetty</title>
			<para>The mingetty daemons are started by <command>init</command> and watched until they die (user exits the shell and is logged out). When this happens, the <command>init</command> daemon will <command>respawn</command><indexterm><primary>respawn(init)</primary></indexterm> a new mingetty. So even if you <command>kill</command> a mingetty daemon, it will be restarted automatically.</para>
			<para>This example shows that init respawns mingetty daemons. Look at the PID's of the last two mingetty processes.</para>
			<screen>
[root@RHEL52 ~]# ps -C mingetty
  PID TTY          TIME CMD
 2407 tty1     00:00:00 mingetty
 2408 tty2     00:00:00 mingetty
 2409 tty3     00:00:00 mingetty
 2410 tty4     00:00:00 mingetty
 2411 tty5     00:00:00 mingetty
 2412 tty6     00:00:00 mingetty
			</screen>
			<para>When we <command>kill</command><indexterm><primary>kill(1)</primary></indexterm> the last two mingettys, then <command>init</command> will notice this and start them again (with a different PID).</para>
			<screen>
[root@RHEL52 ~]# kill 2411 2412
[root@RHEL52 ~]# ps -C mingetty
  PID TTY          TIME CMD
 2407 tty1     00:00:00 mingetty
 2408 tty2     00:00:00 mingetty
 2409 tty3     00:00:00 mingetty
 2410 tty4     00:00:00 mingetty
 2821 tty5     00:00:00 mingetty
 2824 tty6     00:00:00 mingetty
			</screen>
		</section>
		<section><title>disabling a mingetty</title>
			<para>You can disable a mingetty for a certain tty by removing the runlevel from the second field in its line in /etc/inittab. Don't forget to tell init about the change of its configuration file with <command>kill -1 1</command><indexterm><primary>kill(1)</primary></indexterm>.</para>
			<para>The example below shows how to disable mingetty on tty3 to tty6 in runlevels 4 and 5.</para>
			<screen>
[root@RHEL52 ~]# grep getty /etc/inittab 
# Run gettys in standard runlevels
1:2345:respawn:/sbin/mingetty tty1
2:2345:respawn:/sbin/mingetty tty2
3:23:respawn:/sbin/mingetty tty3
4:23:respawn:/sbin/mingetty tty4
5:23:respawn:/sbin/mingetty tty5
6:23:respawn:/sbin/mingetty tty6
			</screen>
		</section>
	</section>
</section>
<?hard-pagebreak?>
<section><title>daemon or demon ?</title>
	<para>A <command>daemon</command><indexterm><primary>daemon</primary></indexterm> is a process that runs in background, without a link to a GUI or terminal. Daemons are usually started at system boot, and stay alive until the system shuts down. In more recent technical writings, daemons are often refered to as <command>services</command>.</para>
	<para>Unix <command>daemons</command> are not to be confused with demons. <command>Evi Nemeth</command><indexterm><primary>Evi Nemeth</primary></indexterm>, co-author of the UNIX System Administration Handbook has the following to say about daemons:</para>
	<para><emphasis>Many people equate the word "daemon" with the word "demon", implying some kind of satanic connection between UNIX and the underworld. This is an egregious misunderstanding. "Daemon" is actually a much older form of "demon"; daemons have no particular bias towards good or evil, but rather serve to help define a person's character or personality. The ancient Greeks' concept of a "personal daemon" was similar to the modern concept of a "guardian angel" ...</emphasis>.</para>
</section>
<section><title>starting and stopping daemons</title>
	<para>The K and S scripts are links to the real scripts in <command>/etc/init.d/</command><indexterm><primary>/etc/init.d/</primary></indexterm>. These can also be used when the system is running to start and stop daemons (or services). Most of them accept the following parameters: start, stop, restart, status.</para>
	<para>For example in this screenshot we restart the samba daemon.</para>
	<screen>root@laika:~# /etc/init.d/samba restart
 * Stopping Samba daemons...                               [ OK ] 
 * Starting Samba daemons...                               [ OK ]</screen>
	<para>You can achieve the same result on RHEL/Fedora with the <command>service</command><indexterm><primary>service(1)</primary></indexterm> command.</para>
	<screen>[root@RHEL4b ~]# service smb restart
Shutting down SMB services:                                [  OK  ]
Shutting down NMB services:                                [  OK  ]
Starting SMB services:                                     [  OK  ]
Starting NMB services:                                     [  OK  ]</screen>
	<para>You might also want to take a look at <command>chkconfig</command><indexterm><primary>chkconfig</primary></indexterm>, <command>update-rc.d</command><indexterm><primary>update-rc.d</primary></indexterm>.</para>
</section>
<?hard-pagebreak?>
<section><title>chkconfig</title>
	<para>The purpose of <command>chkconfig</command><indexterm><primary>chkconfig(8)</primary></indexterm> is to relieve system administrators of manually managing all the links and scripts in <command>/etc/init.d</command> and <command>/etc/rcX.d/</command>.</para>
	<section><title>chkconfig --list</title>
		<para>Here we use <command>chkconfig</command> to list the status of a service in the different runlevels. You can see that the <command>crond</command> daemon (or service) is only activated in runlevels 2 to 5.</para>
		<screen>[root@RHEL52 ~]# chkconfig --list crond
crond          	0:off	1:off	2:on	3:on	4:on	5:on	6:off</screen>
		<para>When you compare the screenshot above with the one below, you can see that <command>off</command> equals to a K link to the script, whereas <command>on</command> equals to an S link.</para>
		<screen>[root@RHEL52 etc]# find ./rc?.d/ -name \*crond -exec ls -l {} \;|cut -b40-
./rc0.d/K60crond -> ../init.d/crond
./rc1.d/K60crond -> ../init.d/crond
./rc2.d/S90crond -> ../init.d/crond
./rc3.d/S90crond -> ../init.d/crond
./rc4.d/S90crond -> ../init.d/crond
./rc5.d/S90crond -> ../init.d/crond
./rc6.d/K60crond -> ../init.d/crond</screen>
	</section>
	<section><title>runlevel configuration</title>
		<para>Here you see how to use chkconfig to disable (or enable) a service in a certain runlevel.</para>
		<para>This screenshot shows how to disable <command>crond</command> in runlevel 3.</para>
		<screen>[root@RHEL52 ~]# chkconfig --level 3 crond off
[root@RHEL52 ~]# chkconfig --list crond
crond          	0:off	1:off	2:on	3:off	4:on	5:on	6:off</screen>
		<para>This screenshot shows how to enable <command>crond</command> in runlevels 3 and 4.</para>
		<screen>[root@RHEL52 ~]# chkconfig --level 34 crond on
[root@RHEL52 ~]# chkconfig --list crond
crond          	0:off	1:off	2:on	3:on	4:on	5:on	6:off</screen>
	</section>
<?hard-pagebreak?>
	<section><title>chkconfig configuration</title>
		<para>Every script in <command>/etc/init.d/</command><indexterm><primary>/etc/init.d/</primary></indexterm> can have (comment) lines to tell chkconfig what to do with the service. The line with <command># chkconfig:</command> contains the runlevels in which the service should be started (2345), followed by the priority for start (90) and stop (60).</para>
		<screen>[root@RHEL52 ~]# head -9 /etc/init.d/crond | tail -5
# chkconfig: 2345 90 60
# description: cron is a standard UNIX program that runs user-specified
#              programs at periodic scheduled times. vixie cron adds a
#              number of features to the basic UNIX cron, including better
#              security and more powerful configuration options.</screen>
	</section>
	<section><title>enable and disable services</title>
		<para>Services can be enabled or disabled in all runlevels with one command. Runlevels 0, 1 and 6 are always stopping services (or calling the scripts with <command>stop</command>) even when their name starts with uppercase S.</para>
		<screen>[root@RHEL52 ~]# chkconfig crond off
[root@RHEL52 ~]# chkconfig --list crond
crond           0:off   1:off   2:off   3:off   4:off   5:off   6:off
[root@RHEL52 ~]# chkconfig crond on
[root@RHEL52 ~]# chkconfig --list crond 
crond           0:off   1:off   2:on    3:on    4:on    5:on    6:off</screen>
	</section>
</section>
<?hard-pagebreak?>
<section><title>update-rc.d</title>
	<section><title>about update-rc.d</title>
		<para>The Debian equivalent of <command>chkconfig</command> is called <command>update-rc.d</command><indexterm><primary>update-rc.d(8)</primary></indexterm>. This tool is designed for use in scripts, if you prefer a graphical tool then look at <command>bum</command>.</para>
		<para>When there are existing links in <command>/etc/rcX.d/</command> then <command>update-rc.d</command> does not do anything. This is to avoid that post installation scripts using <command>update-rc.d</command> are overwriting changes made by a system administrator.</para>
		<screen>root@barry:~# update-rc.d cron remove
update-rc.d: /etc/init.d/cron exists during rc.d purge (use -f to force)</screen>
		<para>As you can see in the next screenshot, nothing changed for the cron daemon.</para>
		<screen>root@barry:~# find /etc/rc?.d/ -name '*cron' -exec ls -l {} \;|cut -b44-
/etc/rc0.d/K11cron -> ../init.d/cron
/etc/rc1.d/K11cron -> ../init.d/cron
/etc/rc2.d/S89cron -> ../init.d/cron
/etc/rc3.d/S89cron -> ../init.d/cron
/etc/rc4.d/S89cron -> ../init.d/cron
/etc/rc5.d/S89cron -> ../init.d/cron
/etc/rc6.d/K11cron -> ../init.d/cron</screen>
	</section>
	<section><title>removing a service</title>
		<para>Here we remove <command>cron</command> from all runlevels. Remember that the proper way to disable a service is to put K scripts oin all runlevels!</para>
		<screen>root@barry:~# update-rc.d -f cron remove
 Removing any system startup links for /etc/init.d/cron ...
   /etc/rc0.d/K11cron
   /etc/rc1.d/K11cron
   /etc/rc2.d/S89cron
   /etc/rc3.d/S89cron
   /etc/rc4.d/S89cron
   /etc/rc5.d/S89cron
   /etc/rc6.d/K11cron
root@barry:~# find /etc/rc?.d/ -name '*cron' -exec ls -l {} \;|cut -b44-
root@barry:~#</screen>
	</section>
	<section><title>enable a service</title>
		<para>This screenshot shows how to use <command>update-rc.d</command> to enable a service in runlevels 2, 3, 4 and 5 and disable the service in runlevels 0, 1 and 6.</para>
		<screen>root@barry:~# update-rc.d cron defaults
 Adding system startup for /etc/init.d/cron ...
   /etc/rc0.d/K20cron -> ../init.d/cron
   /etc/rc1.d/K20cron -> ../init.d/cron
   /etc/rc6.d/K20cron -> ../init.d/cron
   /etc/rc2.d/S20cron -> ../init.d/cron
   /etc/rc3.d/S20cron -> ../init.d/cron
   /etc/rc4.d/S20cron -> ../init.d/cron
   /etc/rc5.d/S20cron -> ../init.d/cron</screen>
	</section>
	<section><title>customize a service</title>
		<para>And here is an example on how to set your custom configuration for the cron daemon.</para>
		<screen>root@barry:~# update-rc.d -n cron start 11 2 3 4 5 . stop 89 0 1 6 .
 Adding system startup for /etc/init.d/cron ...
   /etc/rc0.d/K89cron -> ../init.d/cron
   /etc/rc1.d/K89cron -> ../init.d/cron
   /etc/rc6.d/K89cron -> ../init.d/cron
   /etc/rc2.d/S11cron -> ../init.d/cron
   /etc/rc3.d/S11cron -> ../init.d/cron
   /etc/rc4.d/S11cron -> ../init.d/cron
   /etc/rc5.d/S11cron -> ../init.d/cron</screen>
	</section>
</section>
<section><title>bum</title>
	<para>This screenshot shows <command>bum</command><indexterm><primary>bum(8)</primary></indexterm> in advanced mode.</para>
	<mediaobject><imageobject><imagedata fileref="images/bum.jpg" format="EPS" align="center"></imagedata></imageobject></mediaobject>
</section>
<?hard-pagebreak?>
<section><title>runlevels</title>
	<section><title>display the runlevel</title>
		<para>You can see your current runlevel with the <command>runlevel</command><indexterm><primary>runlevel(1)</primary></indexterm> or <command>who -r</command><indexterm><primary>who(1)</primary></indexterm> commands.</para>
		<para>The runlevel command is typical Linux and will output the previous and the current runlevel. If there was no previous runlevel, then it will mark it with the letter N.</para>
		<screen>[root@RHEL4b ~]# runlevel 
N 3</screen>
		<para>The history of <command>who -r</command> dates back to Seventies Unix, it still works on Linux.</para>
		<screen>[root@RHEL4b ~]# who -r
         run-level 3  Jul 28 09:15                   last=S</screen>
	</section>
	<section><title>changing the runlevel</title>
		<para>You can switch to another runlevel with the <command>telinit</command><indexterm><primary>telinit(8)</primary></indexterm> command. On Linux <command>/sbin/telinit</command><indexterm><primary>/sbin/telinit</primary></indexterm> is usually a (hard) link to <command>/sbin/init</command>.</para>
		<para>This screenshot shows how to switch from runlevel 2 to runlevel 3 without reboot.</para>
		<screen>root@barry:~# runlevel 
N 2
root@barry:~# init 3
root@barry:~# runlevel 
2 3</screen>
	</section>
	<section><title>/sbin/shutdown</title>
		<para>The <command>shutdown</command><indexterm><primary>shutdown(8)</primary></indexterm> command is used to properly shut down a system.</para>
		<para>Common switches used with <command>shutdown</command> are <command>-a</command>, <command>-t</command>, <command>-h</command> and <command>-r</command>.</para>
		<para>The <command>-a</command> switch forces <command>/sbin/shutdown</command> to use <command>/etc/shutdown.allow</command>. The <command>-t</command> switch is used to define the number of seconds between the sending of the <command>TERM</command><indexterm><primary>SIGTERM</primary></indexterm> signal and the <command>KILL</command><indexterm><primary>SIGKILL</primary></indexterm> signal. The <command>-h</command> switch halts the system instead of changing to runlevel 1. The <command>-r</command> switch tells <command>/sbin/shutdown</command> to reboot after shutting down.</para>
		<para>This screenshot shows how to use <command>shutdown</command> with five seconds between TERM and KILL signals.</para>
		<screen>root@barry:~# shutdown -t5 -h now</screen>
		<para>The <command>now</command> is the time argument. This can be <command>+m</command> for the number of minutes to wait before shutting down (with <command>now</command> as an alias for <command>+0</command>. The command will also accept hh:mm instead of <command>+m</command>.</para>
	</section>
	<section><title>halt, reboot and poweroff</title>
		<para>The binary <command>/sbin/reboot</command> is the same as <command>/sbin/halt</command> and <command>/sbin/poweroff</command>. Depending on the name we use to call the command, it can behave differently.</para>
		<para>When in runlevel 0 or 6 <command>halt</command><indexterm><primary>halt(8)</primary></indexterm>, <command>reboot</command><indexterm><primary>reboot(8)</primary></indexterm> and <command>poweroff</command><indexterm><primary>poweroff(8)</primary></indexterm> will tell the kernel to <command>halt</command>, <command>reboot</command> or <command>poweroff</command> the system.</para>
		<para>When not in runlevel 0 or 6, typing <command>reboot</command> as root actually calls the <command>shutdown</command> command with the <command>-r</command> switch and typing <command>poweroff</command> will switch off the power when halting the system.</para>
	</section>
	<section><title>/var/log/wtmp</title>
		<para><command>halt</command>, <command>reboot</command> and <command>poweroff</command> all write to <command>/var/log/wtmp</command><indexterm><primary>/var/log/wtmp</primary></indexterm>. To look at <command>/var/log/wtmp</command>, we need to use th <command>last</command><indexterm><primary>last(1)</primary></indexterm>. </para>
		<screen>[root@RHEL52 ~]# last | grep reboot
reboot   system boot  2.6.18-128.el5   Fri May 29 11:44   (192+05:01)
reboot   system boot  2.6.18-128.el5   Wed May 27 12:10    (06:49)
reboot   system boot  2.6.18-128.el5   Mon May 25 19:34   (1+15:59)
reboot   system boot  2.6.18-128.el5   Mon Feb  9 13:20   (106+21:13)</screen>
	</section>
	<section><title>Ctrl-Alt-Del</title>
		<para>When <command>rc</command> is finished starting all those scripts, <command>init</command><indexterm><primary>init</primary></indexterm> will continue to read /etc/inittab. The next line is about what to do when the user hits <command>Ctrl-Alt-Delete</command><indexterm><primary>Ctrl-Alt-Delete</primary></indexterm> on the keyboard.</para>
		<para>Here is what Debian 4.0 does.</para>
		<screen>root@barry:~# grep -i ctrl /etc/inittab 
# What to do when CTRL-ALT-DEL is pressed.
ca:12345:ctrlaltdel:/sbin/shutdown -t1 -a -r now</screen>
		<para>Which is very similar to the default Red Hat Enterprise Linux 5.2 action.</para>
		<screen>[root@RHEL52 ~]# grep -i ctrl /etc/inittab 
# Trap CTRL-ALT-DELETE
ca::ctrlaltdel:/sbin/shutdown -t3 -r now</screen>
		<para>One noticable difference is that Debian forces shutdown to use <command>/etc/shutdown.allow</command><indexterm><primary>/etc/shutdown.allow</primary></indexterm>, where Red Hat allows everyone to invoke <command>shutdown</command> pressing <command>Ctrl-Alt-Delete</command>. </para>
	</section>
	<section><title>UPS and loss of power</title>
		<screen>[root@RHEL52 ~]# grep ^p /etc/inittab 
pf::powerfail:/sbin/shutdown -f -h +2 "Power Failure; System Shutting Down"
pr:12345:powerokwait:/sbin/shutdown -c "Power Restored; Shutdown Cancelled"</screen>
		<para>It will read commands on what to execute in case of <command>powerfailure</command>, <command>powerok</command> and <command>Ctrl-Alt-Delete</command><indexterm><primary>Ctrl-Alt-Delete</primary></indexterm>. The init process never stops keeping an eye on power failures and that triple key combo.</para>
		<screen>root@barry:~# grep ^p /etc/inittab 
pf::powerwait:/etc/init.d/powerfail start
pn::powerfailnow:/etc/init.d/powerfail now
po::powerokwait:/etc/init.d/powerfail stop</screen>
	</section>
</section>
<?hard-pagebreak?>
<section><title>systemd</title>
	<para>It is likely that <command>systemd</command> will replace all the standard init/runlevel/rc functionality. Both Red Hat and Debian have decided in 2014 that <command>systemd</command> will be replacing <command>init</command> in future releases (RHEL7/CentOS8 and Debian 8).</para>
	<para>The screenshot below shows <command>systemd</command> running as <command>pid 1</command> on RHEL7.</para>
	<screen>[root@rhel7 ~]# ps fax | grep systemd | cut -c1-76
    1 ?        Ss     0:01 /usr/lib/systemd/systemd --switched-root --system
  505 ?        Ss     0:00 /usr/lib/systemd/systemd-journald
  545 ?        Ss     0:00 /usr/lib/systemd/systemd-udevd
  670 ?        Ss     0:00 /usr/lib/systemd/systemd-logind
  677 ?        Ssl    0:00 /bin/dbus-daemon --system --address=systemd: --no
 2662 pts/1    S+     0:00          \_ grep --color=auto systemd
[root@rhel7 ~]#</screen>
	<para>Debian 8 (not yet released in September 2014) uses parts of <command>systemd</command>, but still has <command>init</command> as <command>pid 1</command>.</para>
	<screen>root@debian8:~# ps fax | grep systemd
 2042 ?        S      0:00 /sbin/cgmanager --daemon -m name=systemd
10127 pts/4    S+     0:00          |                   \_ grep systemd
 2777 ?        S      0:00 /lib/systemd/systemd-logind
root@debian8:~#</screen>
<?hard-pagebreak?>
<section><title>systemd targets</title>
	<para>The first command to learn is <command>systemctl list-units --type=target</command> (or the shorter version <command>systemctl -t target</command>). It will show you the different targets on the system.</para>
	<screen>[root@rhel7 ~]# systemctl list-units --type=target
UNIT                LOAD   ACTIVE SUB    DESCRIPTION
basic.target        loaded active active Basic System
cryptsetup.target   loaded active active Encrypted Volumes
getty.target        loaded active active Login Prompts
graphical.target    loaded active active Graphical Interface
local-fs-pre.target loaded active active Local File Systems (Pre)
local-fs.target     loaded active active Local File Systems
multi-user.target   loaded active active Multi-User System
network.target      loaded active active Network
nfs.target          loaded active active Network File System Server
paths.target        loaded active active Paths
remote-fs.target    loaded active active Remote File Systems
slices.target       loaded active active Slices
sockets.target      loaded active active Sockets
swap.target         loaded active active Swap
sysinit.target      loaded active active System Initialization
timers.target       loaded active active Timers

LOAD   = Reflects whether the unit definition was properly loaded.
ACTIVE = The high-level unit activation state, i.e. generalization of SUB.
SUB    = The low-level unit activation state, values depend on unit type.

16 loaded units listed. Pass --all to see loaded but inactive units, too.
To show all installed unit files use 'systemctl list-unit-files'.
[root@rhel7 ~]#</screen>
	<para>Targets are the replacement of runlevels and define specific points to reach when booting the system. For example the <command>graphical.target</command> is reached when you get a graphical interface, and the <command>nfs.target</command> requires a running nfs server.</para>
	<para>To switch to a target (for example <command>multi-user.target</command>), we now use <command>systemctl isolate</command> (instead of the equivalent <command>init 3</command> to change the runlevel).</para>
<screen>[root@rhel7 ~]# ps fax | wc -l
169
[root@rhel7 ~]# systemctl isolate multi-user.target
[root@rhel7 ~]# ps fax | wc -l
129
[root@rhel7 ~]#</screen>
	<para>To change the default target, we again use this <command>systemctl</command> command (instead of editing the <command>/etc/inittab</command> file).</para>
<screen>[root@rhel7 ~]# systemctl enable multi-user.target --force
rm '/etc/systemd/system/default.target'
ln -s '/usr/lib/systemd/system/multi-user.target' '/etc/systemd/system/default\
.target'
[root@rhel7 ~]#</screen>
	<para>This command removed the file <command>/etc/systemd/system/default.target</command> and replaced it with a symbolic link to the <command>multi-user-.target</command> target.</para>
</section>
<?hard-pagebreak?>
<section><title>systemd dependencies</title>
	<para>Dependencies are no longer defined by alfabetical order of running scripts, but by configuration in <command>/etc/systemd/system/</command>. For example here are the required services for the <command>multi-user.target</command> on Red Hat Enterprise 7.</para>
	<screen>[root@rhel7 ~]# ls /etc/systemd/system/multi-user.target.wants/
abrt-ccpp.service     hypervkvpd.service      postfix.service
abrtd.service         hypervvssd.service      remote-fs.target
abrt-oops.service     irqbalance.service      rhsmcertd.service
abrt-vmcore.service   ksm.service             rngd.service
abrt-xorg.service     ksmtuned.service        rpcbind.service
atd.service           libstoragemgmt.service  rsyslog.service
auditd.service        libvirtd.service        smartd.service
avahi-daemon.service  mdmonitor.service       sshd.service
chronyd.service       ModemManager.service    sysstat.service
crond.service         NetworkManager.service  tuned.service
cups.path             nfs.target              vmtoolsd.service
[root@rhel7 ~]#</screen>
	<para>Debian8 is not fully migrated yet.</para>
<screen>root@debian8:~# ls /etc/systemd/system/multi-user.target.wants/ 
anacron.service       binfmt-support.service  pppd-dns.service  ssh.service
atd.service           fancontrol.service      remote-fs.target
avahi-daemon.service  lm-sensors.service      rsyslog.service</screen>
	<para>Typical <command>rc scripts</command> are replaced with services. Issue the <command>systemctl list-units -t service --all</command> (or <command>systemctl -at service</command>) to get a list of all services on your system.</para>
<screen>[root@rhel7 ~]# systemctl -at service | head -5 | column -t | cut -c1-78
UNIT                 LOAD    ACTIVE    SUB      DESCRIPTION
abrt-ccpp.service    loaded  active    exited   Install      ABRT     coredump
abrt-oops.service    loaded  active    running  ABRT         kernel   log
abrt-vmcore.service  loaded  inactive  dead     Harvest      vmcores  for
abrt-xorg.service    loaded  active    running  ABRT         Xorg     log
[root@rhel7 ~]#</screen>
	<para>And here an example on how to see the status of the <command>sshd</command> service.</para>
<screen>[root@rhel7 ~]# systemctl status sshd.service
sshd.service - OpenSSH server daemon
   Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled)
   Active: active (running) since Wed 2014-09-10 13:42:21 CEST; 55min ago
 Main PID: 1400 (sshd)
   CGroup: /system.slice/sshd.service
           --1400 /usr/sbin/sshd -D

Sep 10 13:42:21 rhel7 systemd[1]: Started OpenSSH server daemon.
Sep 10 13:42:21 rhel7 sshd[1400]: Server listening on 0.0.0.0 port 22.
Sep 10 13:42:21 rhel7 sshd[1400]: Server listening on :: port 22.
[root@rhel7 ~]#</screen>
</section>
<?hard-pagebreak?>
<section><title>systemd services</title>
	<para>The <command>chkconfig</command> and <command>service</command> commands are considered 'legacy'. They are replaced with <command>systemctl</command>.</para>
	<para>This screenshot shows the new way to start and stop a service.</para>
<screen>[root@rhel7 ~]# systemctl start crond.service
[root@rhel7 ~]# systemctl show crond.service | grep State
LoadState=loaded
ActiveState=active
SubState=running
UnitFileState=enabled
[root@rhel7 ~]# systemctl stop crond.service
[root@rhel7 ~]# systemctl show crond.service | grep State
LoadState=loaded
ActiveState=inactive
SubState=dead
UnitFileState=enabled
[root@rhel7 ~]#</screen>
	<para>And here is the new way to stop and disable a service.</para>
	<screen>[root@rhel7 ~]# systemctl stop crond.service
[root@rhel7 ~]# systemctl disable crond.service
rm '/etc/systemd/system/multi-user.target.wants/crond.service'
[root@rhel7 ~]# systemctl show crond.service | grep State
LoadState=loaded
ActiveState=inactive
SubState=dead
UnitFileState=disabled
[root@rhel7 ~]#</screen>
	<para>This screenshot shows how to enable and start the service again.</para>
	<screen>[root@rhel7 ~]# systemctl enable crond.service
ln -s '/usr/lib/systemd/system/crond.service' '/etc/systemd/system/multi-user.\
target.wants/crond.service'
[root@rhel7 ~]# systemctl start crond.service
[root@rhel7 ~]# systemctl show crond.service | grep State
LoadState=loaded
ActiveState=active
SubState=running
UnitFileState=enabled
[root@rhel7 ~]#</screen>
</section>
<?hard-pagebreak?>
<section><title>systemd signalling</title>
	<para>You can also use <command>systemd</command> to <command>kill</command> problematic services.</para>
<screen>[root@rhel7 ~]# systemctl show crond.service | grep State
LoadState=loaded
ActiveState=active
SubState=running
UnitFileState=enabled
[root@rhel7 ~]# systemctl kill -s SIGKILL crond.service
[root@rhel7 ~]# systemctl show crond.service | grep State
LoadState=loaded
ActiveState=failed
SubState=failed
UnitFileState=enabled
[root@rhel7 ~]#</screen>
</section>
<section><title>systemd shutdown</title>
	<para>The <command>poweroff</command>, <command>halt</command> and <command>reboot</command> commands are considered legacy now and are handeld by <command>systemctl</command>. The table below shows the legacy commands on the left and their new <command>systemd</command> equivalent on the right.</para>
<table frame='all'><title>systemd power management</title>
<?dbfo table-width="80%" ?>
<tgroup cols='2' align='center' colsep='1' rowsep='1'>
<colspec colname='c1' colwidth="2*" align="left"/>
<colspec colname='c2' colwidth="3*" align="left"/>
<thead>
<row>
  <entry>legacy command</entry>
  <entry>systemd command</entry>
</row>
</thead>
<tbody>
<row>
  <entry>poweroff</entry>
  <entry>systemctl poweroff</entry>
</row>
<row>
  <entry>reboot</entry>
  <entry>systemctl reboot</entry>
</row>
<row>
  <entry>halt</entry>
  <entry>systemctl halt</entry>
</row>
<row>
  <entry>pm-suspend</entry>
  <entry>systemctl suspend</entry>
</row>
<row>
  <entry>pm-hibernate</entry>
  <entry>systemctl hibernate</entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section><title>remote systemd</title>
	<para>The <command>systemctl</command> utility has a buil-in remote control providing there is an <command>ssh daemon</command> running on the remote system.</para>
	<para>This screenshot shows how to use <command>systemctl</command> to verify a service on an other RHEL server.</para>
	<screen>[root@rhel7 ~]# <command>systemctl -H root@192.168.1.65 status sshd</command>
root@192.168.1.65's password:
sshd.service - OpenSSH server daemon
   Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled)
   Active: active (running) since Thu 2014-09-11 13:04:10 CEST; 16min ago
  Process: 1328 ExecStartPre=/usr/sbin/sshd-keygen (code=exited, status=0/SUCCE\
SS)
 Main PID: 1363 (sshd)
   CGroup: /system.slice/sshd.service
[root@rhel7 ~]#</screen>
</section>
<?hard-pagebreak?>
<section><title>there is more systemd</title>
	<para>There are other tools...</para>
<screen>systemd-analyze                 systemd-loginctl
systemd-ask-password            systemd-machine-id-setup
systemd-cat                     systemd-notify
systemd-cgls                    systemd-nspawn
systemd-cgtop                   systemd-run
systemd-coredumpctl             systemd-stdio-bridge
systemd-delta                   systemd-sysv-convert
systemd-detect-virt             systemd-tmpfiles
systemd-inhibit                 systemd-tty-ask-password-agent</screen>
	<para>For example <command>systemd-analyze blame</command> will give you an overview of the time it took for each service to boot.</para>
<screen>[root@rhel7 ~]# systemd-analyze blame | head
          1.977s firewalld.service
          1.096s tuned.service
           993ms postfix.service
           939ms iprinit.service
           925ms vboxadd-x11.service
           880ms firstboot-graphical.service
           839ms accounts-daemon.service
           829ms network.service
           822ms iprupdate.service
           795ms boot.mount
[root@rhel7 ~]#</screen>
</section>
</section>
