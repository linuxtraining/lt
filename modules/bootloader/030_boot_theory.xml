<?hard-pagebreak?>
<section><title>boot terminology</title>
	<para>The exact order of things that happen when starting a computer system, depends on the hardware architecture (<command>Intel x86</command><indexterm><primary>Intel</primary></indexterm> is different from <command>Sun Sparc</command><indexterm><primary>Sun</primary></indexterm> etc), on the boot loader (<command>grub</command> is different from <command>lilo</command>) and on the operating system (<command>Linux</command>, <command>Solaris</command><indexterm><primary>Solaris</primary></indexterm>, <command>BSD</command><indexterm><primary>BSD</primary></indexterm> etc). Most of this chapter is focused on booting <command>Linux</command> on <command>Intel x86</command><indexterm><primary>x86</primary></indexterm> with <command>grub</command>.</para>
	<section><title>post</title>
		<para>A computer starts booting the moment you turn on the power (no kidding). This first process is called <command>post</command><indexterm><primary>POST</primary></indexterm> or <command>power on self test</command><indexterm><primary>Power On Self Test</primary></indexterm>. If all goes well then this leads to the <command>bios</command>. If all goes not so well, then you might hear nothing, or hear beeping, or see an error message on the screen, or maybe see smoke coming out of the computer (burning hardware smells bad!).</para>
	</section>
	<section><title>bios</title>
		<para>All <command>Intel x86</command> computers will have a <command>basic input/output system</command> or <command>bios</command><indexterm><primary>BIOS</primary></indexterm> to detect, identify and initialize hardware. The <command>bios</command> then goes looking for a <command>boot device</command>. This can be a floppy, hard disk, cdrom, network card or usb drive.</para>
		<para>During the <command>bios</command> you can see a message on the screen telling you which key (often <command>Del</command> or <command>F2</command>) to press to enter the <command>bios</command> setup.</para>
		<mediaobject><imageobject><imagedata fileref="images/bios.png" format="EPS" align="center"></imagedata></imageobject></mediaobject>
	</section>
<?hard-pagebreak?>
	<section><title>openboot</title>
		<para>Sun <command>sparc</command><indexterm><primary>SPARC</primary></indexterm> systems start with <command>openboot</command><indexterm><primary>OpenBoot(Sun)</primary></indexterm> to test the hardware and to boot the operating system. <command>Bill Callkins</command><indexterm><primary>Bill Callkins</primary></indexterm> explains <command>openboot</command> in his Solaris System Administration books. The details of <command>openboot</command> are not the focus of this course.</para>
	</section>
	<section><title>boot password</title>
		<para>The <command>bios</command> allows you to set a password. Do not forget this password, or you will have to open up the hardware to reset it. You can sometimes set a password to boot the system, and another password to protect the <command>bios</command> from being modified.</para>
	</section>
	<section><title>boot device</title>
		<para>The <command>bios</command> will look for a <command>boot device</command> in the order configured in the bios setup. Usually an operating system on a production server boots of a hard disk.</para>
		<mediaobject><imageobject><imagedata fileref="images/bootdevice.png" format="EPS" align="center"></imagedata></imageobject></mediaobject>
	</section>
<?hard-pagebreak?>
	<section><title>master boot record</title>
		<para>The <command>master boot record</command><indexterm><primary>master boot record</primary></indexterm> or <command>mbr</command><indexterm><primary>mbr</primary></indexterm> is the first sector of a hard disk. The partitioning of a disk in <command>primary</command><indexterm><primary>primary partition</primary></indexterm> partitions, and the active partition are defined in the <command>mbr</command>.</para>
		<para>The <command>mbr</command> is 512 bytes long and can be copied with <command>dd</command><indexterm><primary>dd(1)</primary></indexterm>.</para>
		<screen>dd if=/dev/sda of=bootsect.mbr count=1 bs=512</screen>
	</section>
	<section><title>bootloader</title>
		<para>The <command>mbr</command> is executed by the <command>bios</command> and contains either (a small) <command>bootloader</command><indexterm><primary>bootloader</primary></indexterm> or code to load a <command>bootloader</command>.</para>
		<para>Looking at the <command>mbr</command> with <command>od</command><indexterm><primary>od(1)</primary></indexterm> can reveal information about the <command>bootloader</command>.</para>
		<screen>paul@laika:~$ sudo dd if=/dev/sda count=1 bs=16 skip=24 2>/dev/null|od -c
0000000 376   G   R   U   B      \0   G   e   o   m  \0   H   a   r   d
0000020</screen>
        	<para>There are a variety of bootloaders available, most common on <command>Intel</command> architecture is <command>grub</command><indexterm><primary>grub</primary></indexterm>, which is replacing <command>lilo</command><indexterm><primary>lilo</primary></indexterm> in many places. When installing <command>Linux</command> on <command>sparc</command> architecture, you can choose <command>silo</command><indexterm><primary>silo</primary></indexterm>, <command>Itanium</command> systems can use <command>elilo</command><indexterm><primary>elilo</primary></indexterm>, <command>IBM S/390</command> and <command>zSeries</command> use <command>z/IPL</command><indexterm><primary>z/IPL</primary></indexterm>, <command>Alpha</command> uses <command>milo</command> and <command>PowerPC</command> architectures use <command>yaboot</command><indexterm><primary>yaboot</primary></indexterm> (yet another boot loader).</para>
		<para>Bootable cd's and dvd's often use <command>syslinux</command>.</para>
	</section>
	<section><title>kernel</title>
		<para>The goal of all this is to load an operating system, or rather the <command>kernel</command> of an operating system. A typical bootloader like <command>grub</command> will copy a kernel from hard disk to memory, and will then hand control of the computer to the kernel (execute the kernel).</para>
		<para>Once the Linux kernel is loaded, the bootloader turns control over to it. From that moment on, the kernel is in control of the system. After discussing bootloaders, we continue with the <command>init system</command> that starts all the daemons.</para>
	</section>
</section>
<?hard-pagebreak?>
<section><title>grub</title>
<section><title>/boot/grub/grub.cfg</title>
	<para>Debian switched to <command>grub2</command><indexterm><primary>grub2</primary></indexterm>, which will be discussed in the next section. The main boot menu configuration file for <command>grub2</command> is <command>grub.cfg</command>.</para>
	<screen>root@debian10:~# ls -l /boot/grub/grub.cfg
-r--r--r-- 1 root root 2453 May 13 17:22 /boot/grub/grub.cfg
root@debian10:~#</screen>
</section>
<section><title>/boot/grub/grub.conf</title>
	<para>Distributions like Red Hat Enterprise Linux 6 use <command>grub.conf</command><indexterm><primary>/boot/grub/grub.conf</primary></indexterm> and provide a symbolic link from <command>/boot/grub/menu.lst</command><indexterm><primary>/boot/grub/menu.lst</primary></indexterm> and from <command>/etc/grub.conf</command><indexterm><primary>/etc/grub.conf</primary></indexterm> to this file.</para>
	<screen>[root@centos65 ~]# ls -l /boot/grub/menu.lst
lrwxrwxrwx. 1 root root 11 Mar  7 11:53 /boot/grub/menu.lst -> ./grub.conf
[root@centos65 ~]# ls -l /boot/grub/grub.conf
-rw-------. 1 root root 1189 May  5 11:47 /boot/grub/grub.conf
[root@centos65 ~]#</screen>
	<para>The file currently (RHEL 6.5) looks like this:</para>
	<screen>[root@centos65 ~]# more /boot/grub/grub.conf
# grub.conf generated by anaconda
#
# Note that you do not have to rerun grub after making changes to this file
# NOTICE:  You have a /boot partition.  This means that
#          all kernel and initrd paths are relative to /boot/, eg.
#          root (hd0,0)
#          kernel /vmlinuz-version ro root=/dev/mapper/VolGroup-lv_root
#          initrd /initrd-[generic-]version.img
#boot=/dev/sda
default=0
timeout=5
splashimage=(hd0,0)/grub/splash.xpm.gz
hiddenmenu
title CentOS (2.6.32-431.11.2.el6.x86_64)
        root (hd0,0)
        kernel /vmlinuz-2.6.32-431.11.2.el6.x86_64 ro root=/dev/mapper/VolGr\
oup-lv_root rd_NO_LUKS LANG=en_US.UTF-8 rd_NO_MD rd_LVM_LV=VolGroup/lv_swap \
SYSFONT=latarcyrheb-sun16 crashkernel=auto rd_LVM_LV=VolGroup/lv_root  KEYBO\
ARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet
        initrd /initramfs-2.6.32-431.11.2.el6.x86_64.img
title CentOS (2.6.32-431.el6.x86_64)
        root (hd0,0)
        kernel /vmlinuz-2.6.32-431.el6.x86_64 ro root=/dev/mapper/VolGroup-l\
v_root rd_NO_LUKS LANG=en_US.UTF-8 rd_NO_MD rd_LVM_LV=VolGroup/lv_swap SYSFO\
NT=latarcyrheb-sun16 crashkernel=auto rd_LVM_LV=VolGroup/lv_root  KEYBOARDTY\
PE=pc KEYTABLE=us rd_NO_DM rhgb quiet
        initrd /initramfs-2.6.32-431.el6.x86_64.img
[root@centos65 ~]#</screen>
</section>
<?hard-pagebreak?>
<section><title>menu commands</title>
	<para>The <command>menu commands</command> must be at the top of <command>grub</command>'s configuration file.</para>
	<section><title>default</title>
		<para>The <command>default</command><indexterm><primary>default(grub)</primary></indexterm> command sets a default <command>entry</command> to start. The first <command>entry</command> has number 0.</para>
		<screen>default=0</screen>
		<para>Each entry or <command>stanza</command> starts with a <command>title</command> directive.</para>
	</section>
	<section><title>fallback</title>
		<para>In case the <command>default</command> does not boot, use the <command>fallback</command><indexterm><primary>fallback(grub)</primary></indexterm> entry instead.</para>
		<screen>fallback=1</screen>
	</section>
	<section><title>timeout</title>
		<para>The <command>timeout</command><indexterm><primary>timeout(grub)</primary></indexterm> will wait a number of seconds before booting the <command>default</command> entry.</para>
		<screen>timeout=5</screen>
	</section>
	<section><title>hiddenmenu</title>
		<para>The <command>hiddenmenu</command><indexterm><primary>hiddenmenu(grub)</primary></indexterm> will hide the <command>grub</command> menu unless the user presses <command>Esc</command> before the <command>timeout</command> expires.</para>
		<screen>hiddenmenu</screen>
	</section>
	<section><title>title</title>
		<para>With <command>title</command><indexterm><primary>title(grub)</primary></indexterm> we can start a new <command>entry</command> or <command>stanza</command>.</para>
		<screen>title CentOS (2.6.32-431.11.2.el6.x86_64)</screen>
	</section>
	<section><title>password</title>
		<para>You can add a <command>password</command><indexterm><primary>password(grub)</primary></indexterm> to prevent interactive selection of a boot environment while <command>grub</command> is running.</para>
		<screen>password --md5 $1$Ec.id/$T2C2ahI/EG3WRRsmmu/HN/</screen>
		<para>Use the <command>grub</command> interactive shell to create the password hash.</para>
		<screen>grub> md5crypt

Password: ********
Encrypted: $1$Ec.id/$T2C2ahI/EG3WRRsmmu/HN/</screen>
	</section>
</section>
<?hard-pagebreak?>
<section><title>stanza commands</title>
	<para>Every <command>operating system</command> or <command>kernel</command> that you want to boot with <command>grub</command> will have a <command>stanza</command><indexterm><primary>stanza(grub)</primary></indexterm> aka an <command>entry</command> of a couple of lines. Listed here are some of the common <command>stanza</command> commands.</para>
	<section><title>boot</title>
		<para>Technically the <command>boot</command><indexterm><primary>boot(grub)</primary></indexterm> command is only mandatory when running the <command>grub command line</command>. This command does not have any parameters and can only be set as the last command of a stanza.</para>
		<screen>boot</screen>
	</section>
	<section><title>kernel</title>
		<para>The <command>kernel</command><indexterm><primary>kernel(grub)</primary></indexterm> command points to the location of the kernel. To boot Linux this means booting a <command>gzip</command><indexterm><primary>gzip(1)</primary></indexterm> compressed <command>zImage</command><indexterm><primary>zImage</primary></indexterm> or <command>bzip2</command><indexterm><primary>bzip2</primary></indexterm> compressed <command>bzImage</command><indexterm><primary>bzImage</primary></indexterm>.</para>
		<para>This screenshot shows a <command>kernel</command> command used to load a Debian kernel.</para>
		<screen>kernel  /boot/vmlinuz-2.6.17-2-686 root=/dev/hda1 ro</screen>
		<para>And this is how RHEL 5 uses the <command>kernel</command> command.</para>
		<screen>kernel /vmlinuz-2.6.18-128.el5 ro root=/dev/VolGroup00/LogVol00 rhgb quiet</screen>
		<para>All parameters in the kernel line can be read by the kernel itself or by any other program (which are started later) by reading <command>/proc/cmdline</command><indexterm><primary>/proc/cmdline</primary></indexterm></para>
	</section>
	<section><title>initrd</title>
		<para>Many <command>Linux</command> installations will need an <command>initial ramdisk</command> at boot time. This can be set in <command>grub</command> with the <command>initrd</command><indexterm><primary>initrd(grub)</primary></indexterm> command.</para>
		<para>Here a screenshot of Debian 4.0</para>
		<screen>initrd /boot/initrd.img-2.6.17-2-686</screen>
		<para>And the same for Red Hat Enterprise Linux 5</para>
		<screen>initrd /initrd-2.6.18-128.el5.img</screen>
	</section>
	<section><title>root</title>
		<para>The <command>root</command><indexterm><primary>root(grub)</primary></indexterm> command accepts the root device as a parameter.</para>
		<para>The <command>root</command> command will point to the hard disk and partition to use, with <command>hd0</command> as the first hard disk device and <command>hd1</command> as the second hard disk device. The same numbering is used for partitions, so <command>hd0,0</command> is the first partition on the first disk and <command>hd0,1</command> is the second partition on that disk.</para>
		<screen>root (hd0,0)</screen>
	</section>
<?hard-pagebreak?>
	<section><title>savedefault</title>
		<para>The <command>savedefault</command><indexterm><primary>savedefault(grub)</primary></indexterm> command can be used together with <command>default saved</command><indexterm><primary>default(grub)</primary></indexterm> as a menu command. This combination will set the currently booted stanza as the next default stanza to boot.</para>
		<screen>default saved
timeout 10

title Linux
root (hd0,0)
kernel /boot/vmlinuz
savedefault

title DOS
root (hd0,1)
makeactive
chainloader +1
savedefault</screen>
	</section>
</section>
<section><title>chainloading</title>
	<para>With <command>grub</command> booting, there are two choices: loading an operating system or <command>chainloading</command><indexterm><primary>chainloading</primary></indexterm> another bootloader. The <command>chainloading</command> feature of grub loads the bootsector of a partition (that contains an operating system).</para>
	<para>Some older operating systems require a <command>primary partition</command><indexterm><primary>primary partition</primary></indexterm> that is set as <command>active</command><indexterm><primary>active partition</primary></indexterm>. Only one partition can be set <command>active</command> so <command>grub</command><indexterm><primary>grub</primary></indexterm> can do this on the fly just before <command>chainloading</command>.</para>
	<para>This screenshot shows how to set the first primary partition <command>active</command> with <command>grub</command>.</para>
	<screen>root  (hd0,0)
makeactive</screen>
	<para>Chainloading refers to grub loading another operating system's bootloader. The <command>chainloader</command><indexterm><primary>chainloader</primary></indexterm> switch receives one option: the number of sectors to read and boot. For <command>DOS</command><indexterm><primary>DOS</primary></indexterm> and <command>OS/2</command><indexterm><primary>OS/2</primary></indexterm> one sector is enough. Note that <command>DOS</command> requires the boot/root partition to be active!</para>
	<para>Here is a complete example to <command>chainload</command> an old operating system.</para>
	<screen>title MS-DOS 6.22
root  (hd0,1)
makeactive
chainloader +1</screen>
</section>
<?hard-pagebreak?>
<section><title>simple stanza examples</title>
	<para>This is a screenshot of a <command>Debian 4</command> stanza.</para>
	<screen>title   Debian GNU/Linux, kernel 2.6.17-2-686
root    (hd0,0)
kernel  /boot/vmlinuz-2.6.17-2-686 root=/dev/hda1 ro 
initrd  /boot/initrd.img-2.6.17-2-686</screen>
	<para>Here a screenshot of a <command>Red Hat Enterprise Linux 5</command> stanza.</para>
	<screen>title Red Hat Enterprise Linux Server (2.6.18-128.el5)
 root (hd0,0)
 kernel /vmlinuz-2.6.18-98.el5 ro root=/dev/VolGroup00/LogVol00 rhgb quiet
 initrd /initrd-2.6.18-98.el5.img</screen>
</section>
<section><title>editing grub at boot time</title>
	<para>At boot time, when the <command>grub</command> menu is displayed, you can type <command>e</command> to edit the current stanza. This enables you to add parameters to the kernel.</para>
	<para>One such parameter, useful when you lost the root password, is <command>single</command>. This will boot the kernel in single user mode (although some distributions will still require you to type the root password.</para>
	<screen>kernel  /boot/vmlinuz-2.6.17-2-686 root=/dev/hda1 ro single</screen>
	<para>Another option to reset a root password is to use an <command>init=/bin/bash</command> parameter.</para>
	<screen>kernel  /boot/vmlinuz-2.6.17-2-686 root=/dev/hda1 ro init=/bin/bash</screen>
	<para>Note that some distributions will disable this option at kernel compile time.</para>
</section>
<section><title>installing grub</title>
	<para>Run the <command>grub-install</command><indexterm><primary>grub-install</primary></indexterm> command to install <command>grub</command>. The command requires a destination for overwriting the <command>boot sector</command> or <command>mbr</command>.</para>
	<screen># grub-install /dev/hda</screen>
	<para>You will rarely have to do this manually, since grub is installed when installing the operating system and does not need any re-install when changing configuration (as is the case for <command>lilo</command>).</para>
</section>
</section>
<?hard-pagebreak?>
<section><title>grub2</title>
<section><title>grub 2.0 ?</title>
	<para>The main configuration file is now <command>/boot/grub/grub.cfg</command>. And while this file may look familiar, one should never edit this file directly (because it is generated!).</para>
	<screen>root@debian10:~# ls -l /boot/grub/grub.cfg
-r--r--r-- 1 root root 2453 May 13 17:22 /boot/grub/grub.cfg
root@debian10:~# head -3 /boot/grub/grub.cfg
#
# DO NOT EDIT THIS FILE
#</screen>
</section>
<section><title>/etc/grub.d/40_custom</title>
	<para>The <command>/etc/grub.d/40_custom</command><indexterm><primary>/etc/grub.d/40_custom</primary></indexterm>  file can be changed to include custom entries. These entries are automatically added to grub.</para>
	<screen>root@debian10:~# ls -l /etc/grub.d/40_custom
-rwxr-xr-x 1 root root 214 Jul  3  2013 /etc/grub.d/40_custom
root@debian10:~# cat /etc/grub.d/40_custom
#!/bin/sh
exec tail -n +3 $0
# This file provides an easy way to add custom menu entries.  Simply type the
# menu entries you want to add after this comment.  Be careful not to change
# the 'exec tail' line above.</screen>
</section>
<section><title>/etc/default/grub</title>
	<para>The new configuration file for changing grub is now <command>/etc/default/grub</command><indexterm><primary>/etc/default/grub</primary></indexterm>.</para>
	<screen>root@debian10:~# head /etc/default/grub
# If you change this file, run 'update-grub' afterwards to update
# /boot/grub/grub.cfg.
# For full documentation of the options in this file, see:
#   info -f grub -n 'Simple configuration'

GRUB_DEFAULT=0
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR=`lsb_release -i -s 2> /dev/null || echo Debian`
GRUB_CMDLINE_LINUX_DEFAULT="quiet"
GRUB_CMDLINE_LINUX="debian-installer=en_US"</screen>
</section>
<section><title>update-grub</title>
	<para>Whenever the <command>/etc/default/grub</command> file is changed, you will need to run <command>update-grub</command><indexterm><primary>update-grub</primary></indexterm> to apply the changes.</para>
	<screen>root@debian10:~# vi /etc/default/grub
root@debian10:~# update-grub
Generating grub.cfg ...
Found linux image: /boot/vmlinuz-3.2.0-4-amd64
Found initrd image: /boot/initrd.img-3.2.0-4-amd64
done</screen>
</section>
</section>
<?hard-pagebreak?>
<section><title>lilo</title>
	<section><title>Linux loader</title>
		<para><command>lilo</command><indexterm><primary>lilo</primary></indexterm> used to be the most used Linux bootloader, but is steadily being replaced with <command>grub</command> and recently <command>grub2</command>.</para>
	</section>
	<section><title>lilo.conf</title>
		<para>Here is an example of a <command>lilo.conf</command><indexterm><primary>lilo.conf</primary></indexterm> file. The <command>delay</command> switch receives a number in tenths of a second. So the delay below is three seconds, not thirty!</para>
		<screen>boot = /dev/hda
delay = 30

image = /boot/vmlinuz
  root = /dev/hda1
  label = Red Hat 5.2

image = /boot/vmlinuz
  root = /dev/hda2
  label = S.U.S.E. 8.0

other = /dev/hda4
  table = /dev/hda
  label = MS-DOS 6.22</screen>
		<para>The configration file shows three example stanzas. The first one boots Red Hat from the first partition on the first disk (hda1). The second stanza boots Suse 8.0 from the next partition. The last one loads MS-DOS.</para>
	</section>
</section>
