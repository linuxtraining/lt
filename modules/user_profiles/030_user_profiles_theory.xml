<?hard-pagebreak?>
<section><title>system profile</title>
	<para>Both the <command>bash</command><indexterm><primary>/bin/bash</primary></indexterm> and the <command>ksh</command><indexterm><primary>/bin/ksh</primary></indexterm> shell will verify the existence of <command>/etc/profile</command><indexterm><primary>/etc/profile</primary></indexterm> and <command>source</command> it if it exists.</para>
	<para>When reading this script, you will notice (both on Debian and on Red Hat Enterprise Linux) that it builds the PATH environment variable (among others). The script might also change the PS1 variable, set the HOSTNAME and execute even more scripts like <command>/etc/inputrc</command><indexterm><primary>/etc/inputrc</primary></indexterm></para>
	<para>This screenshot uses grep to show PATH manipulation in <command>/etc/profile</command> on Debian.</para>
	<screen>root@debian10:~# <command>grep PATH /etc/profile</command>
  PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  PATH="/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games"
export PATH
root@debian10:~#</screen>
	<para>This screenshot uses grep to show PATH manipulation in <command>/etc/profile</command> on RHEL7/CentOS7.</para>
	<screen>[root@centos7 ~]# <command>grep PATH /etc/profile</command>
    case ":${PATH}:" in
                PATH=$PATH:$1
                PATH=$1:$PATH
export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL
[root@centos7 ~]#</screen>
	<para>The <command>root user</command> can use this script to set aliases, functions, and variables for every user on the system.</para>
</section>
<section><title>~/.bash_profile</title>
	<para>When this file exists in the home directory, then <command>bash</command> will source it. On Debian Linux 5/6/7 this file does not exist by default.</para>
	<para>RHEL7/CentOS7 uses a small <command>~/.bash_profile</command><indexterm><primary>.bash_profile</primary></indexterm> where it checks for the existence of <command>~/.bashrc</command><indexterm><primary>.bashrc</primary></indexterm> and then sources it. It also adds $HOME/bin to the $PATH variable.</para>
		<screen>[root@rhel7 ~]# <command>cat /home/paul/.bash_profile</command>
# .bash_profile

# Get the aliases and functions
if [ -f ~/.bashrc ]; then
        . ~/.bashrc
fi

# User specific environment and startup programs

PATH=$PATH:$HOME/.local/bin:$HOME/bin

export PATH
[root@rhel7 ~]#</screen>
	</section>
<?hard-pagebreak?>
	<section><title>~/.bash_login</title>
		<para>When <command>.bash_profile</command> does not exist, then <command>bash</command> will check for <command>~/.bash_login</command><indexterm><primary>.bash_login</primary></indexterm> and source it.</para>
		<para>Neither Debian nor Red Hat have this file by default.</para>
	</section>
	<section><title>~/.profile</title>
		<para>When neither <command>~/.bash_profile</command> and <command>~/.bash_login</command> exist, then bash will verify the existence of <command>~/.profile</command> and execute it. This file does not exist by default on Red Hat.</para>
		<para>On Debian this script can execute <command>~/.bashrc</command><indexterm><primary>.bashrc</primary></indexterm> and will add $HOME/bin to the $PATH variable.</para>
		<screen>root@debian10:~# <command>tail -11 /home/paul/.profile</command>
if [ -n "$BASH_VERSION" ]; then
    # include .bashrc if it exists
    if [ -f "$HOME/.bashrc" ]; then
        . "$HOME/.bashrc"
    fi
fi

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/bin" ] ; then
    PATH="$HOME/bin:$PATH"
fi</screen>
		<para>RHEL/CentOS does not have this file by default.</para>
	</section>
	<section><title>~/.bashrc</title>
		<para>The <command>~/.bashrc</command> script is often sourced by other scripts. Let us take a look at what it does by default.</para>
		<para>Red Hat uses a very simple <command>~/.bashrc</command>, checking for <command>/etc/bashrc</command><indexterm><primary>/etc/bashrc</primary></indexterm> and sourcing it. It also leaves room for custom aliases and functions.</para>
		<screen>[root@rhel7 ~]# <command>cat /home/paul/.bashrc</command>
# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
        . /etc/bashrc
fi

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions</screen>
		<para>On Debian this script is quite a bit longer and configures $PS1, some history variables and a number af active and inactive aliases.</para>
		<screen>root@debian10:~# wc -l /home/paul/.bashrc
110 /home/paul/.bashrc</screen>
	</section>
<?hard-pagebreak?>
	<section><title>~/.bash_logout</title>
		<para>When exiting <command>bash</command>, it can execute <command>~/.bash_logout</command><indexterm><primary>.bash_logout</primary></indexterm>.</para>
		<para> Debian use this opportunity to clear the console screen.</para>
		<screen>serena@deb106:~$ <command>cat .bash_logout</command>
# ~/.bash_logout: executed by bash(1) when login shell exits.

# when leaving the console clear the screen to increase privacy

if [ "$SHLVL" = 1 ]; then
    [ -x /usr/bin/clear_console ] &#038;&#038; /usr/bin/clear_console -q
fi</screen>
	<para>Red Hat Enterprise Linux 5 will simple call the <command>/usr/bin/clear</command> command in this script.</para>
		<screen>[serena@rhel53 ~]$ cat .bash_logout 
# ~/.bash_logout

/usr/bin/clear</screen>
	<para>Red Hat Enterprise Linux 6 and 7 create this file, but leave it empty (except for a comment).</para>
	<screen>paul@rhel65:~$ <command>cat .bash_logout</command>
# ~/.bash_logout</screen>
	</section>
<?hard-pagebreak?>
	<section><title>Debian overview</title>
		<para>Below is a table overview of when Debian is running any of these bash startup scripts.</para>
<table frame='all'><title>Debian User Environment</title>
<?dbfo table-width="60%" ?>
<tgroup cols='5' align='left' colsep='1' rowsep='1'>
<colspec colname='c1' colwidth="3*" align="left"/>
<colspec colname='c2' colwidth="1*" align="center"/>
<colspec colname='c3' colwidth="1*" align="center"/>
<colspec colname='c4' colwidth="1*" align="center"/>
<colspec colname='c5' colwidth="1*" align="center"/>
<thead>
<row>
  <entry>script</entry>
  <entry>su</entry>
  <entry>su -</entry>
  <entry>ssh</entry>
  <entry>gdm</entry>
</row>
</thead>
<tbody>
<row>
  <entry>~./bashrc</entry>
  <entry>no</entry>
  <entry>yes</entry>
  <entry>yes</entry>
  <entry>yes</entry>
</row>
<row>
  <entry>~/.profile</entry>
  <entry>no</entry>
  <entry>yes</entry>
  <entry>yes</entry>
  <entry>yes</entry>
</row>
<row>
  <entry>/etc/profile</entry>
  <entry>no</entry>
  <entry>yes</entry>
  <entry>yes</entry>
  <entry>yes</entry>
</row>
<row>
  <entry>/etc/bash.bashrc</entry>
  <entry>yes</entry>
  <entry>no</entry>
  <entry>no</entry>
  <entry>yes</entry>
</row>
</tbody>
</tgroup>
</table>
	</section>
	<section><title>RHEL5 overview</title>
		<para>Below is a table overview of when Red Hat Enterprise Linux 5 is running any of these bash startup scripts.</para>
<table frame='all'><title>Red Hat User Environment</title>
<?dbfo table-width="60%" ?>
<tgroup cols='5' align='left' colsep='1' rowsep='1'>
<colspec colname='c1' colwidth="3*" align="left"/>
<colspec colname='c2' colwidth="1*" align="center"/>
<colspec colname='c3' colwidth="1*" align="center"/>
<colspec colname='c4' colwidth="1*" align="center"/>
<colspec colname='c5' colwidth="1*" align="center"/>
<thead>
<row>
  <entry>script</entry>
  <entry>su</entry>
  <entry>su -</entry>
  <entry>ssh</entry>
  <entry>gdm</entry>
</row>
</thead>
<tbody>
<row>
  <entry>~./bashrc</entry>
  <entry>yes</entry>
  <entry>yes</entry>
  <entry>yes</entry>
  <entry>yes</entry>
</row>
<row>
  <entry>~/.bash_profile</entry>
  <entry>no</entry>
  <entry>yes</entry>
  <entry>yes</entry>
  <entry>yes</entry>
</row>
<row>
  <entry>/etc/profile</entry>
  <entry>no</entry>
  <entry>yes</entry>
  <entry>yes</entry>
  <entry>yes</entry>
</row>
<row>
  <entry>/etc/bashrc</entry>
  <entry>yes</entry>
  <entry>yes</entry>
  <entry>yes</entry>
  <entry>yes</entry>
</row>
</tbody>
</tgroup>
</table>
</section>
